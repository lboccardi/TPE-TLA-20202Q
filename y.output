Terminals unused in grammar

    ELSE
    ARRAY


Grammar

    0 $accept: start $end

    1 start: MAIN EXEC program END_EXEC
    2      | function start

    3 function: type FUNCTION ALPHA OPEN_P params CLOSE_P EXEC program END_EXEC

    4 type: INT
    5     | STRING

    6 params: type ALPHA
    7       | type ALPHA COMMA params
    8       | %empty

    9 args: assignment
   10     | assignment COMMA args
   11     | call
   12     | %empty

   13 call: ALPHA OPEN_P args CLOSE_P

   14 program: var END program
   15        | call END program
   16        | OPEN_P rule operator rule CLOSE_P CONDITIONAL arrow EXEC program END_EXEC program
   17        | RETURN assignment END
   18        | STDIN OPEN_P ALPHA CLOSE_P END program
   19        | STDOUT out END program
   20        | %empty

   21 out: SPACE_ALPHA out
   22    | ESCAPE SPACE_ALPHA ESCAPE out
   23    | %empty
   24    | ALPHA out
   25    | ESCAPE ALPHA ESCAPE out

   26 var: type ALPHA ASSIGN assignment operation
   27    | ALPHA ASSIGN assignment operation
   28    | type ALPHA
   29    | type ALPHA ASSIGN call
   30    | ALPHA ASSIGN call

   31 operation: op assignment operation
   32          | %empty

   33 assignment: ALPHA
   34           | DIGIT
   35           | STRING_VALUE

   36 rule: OPEN_P rule operator rule CLOSE_P
   37     | assignment

   38 arrow: WHILE
   39      | IF

   40 operator: op
   41         | L
   42         | G
   43         | LE
   44         | GE
   45         | EQ
   46         | NE
   47         | NOT
   48         | OR
   49         | AND

   50 op: PLUS
   51   | MINUS
   52   | DIV
   53   | TIMES


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    DIGIT <stringValue> (258) 34
    ALPHA <stringValue> (259) 3 6 7 13 18 24 25 26 27 28 29 30 33
    SPACE_ALPHA <stringValue> (260) 21 22
    STRING_VALUE <stringValue> (261) 35
    INT <stringValue> (262) 4
    STRING <stringValue> (263) 5
    PLUS <stringValue> (264) 50
    MINUS <stringValue> (265) 51
    TIMES <stringValue> (266) 53
    DIV <stringValue> (267) 52
    END (268) 14 15 17 18 19
    OPEN_P (269) 3 13 16 18 36
    CLOSE_P (270) 3 13 16 18 36
    CONDITIONAL (271) 16
    EXEC (272) 1 3 16
    END_EXEC (273) 1 3 16
    IF (274) 39
    ELSE (275)
    ESCAPE (276) 22 25
    WHILE (277) 38
    L (278) 41
    G (279) 42
    LE (280) 43
    GE (281) 44
    EQ (282) 45
    NE (283) 46
    NOT (284) 47
    OR (285) 48
    AND (286) 49
    ASSIGN (287) 26 27 29 30
    RETURN (288) 17
    MAIN (289) 1
    STDIN (290) 18
    STDOUT (291) 19
    FUNCTION (292) 3
    COMMA (293) 7 10
    ARRAY (294)


Nonterminals, with rules where they appear

    $accept (40)
        on left: 0
    start <stringValue> (41)
        on left: 1 2
        on right: 0 2
    function <stringValue> (42)
        on left: 3
        on right: 2
    type <stringValue> (43)
        on left: 4 5
        on right: 3 6 7 26 28 29
    params <stringValue> (44)
        on left: 6 7 8
        on right: 3 7
    args <stringValue> (45)
        on left: 9 10 11 12
        on right: 10 13
    call <stringValue> (46)
        on left: 13
        on right: 11 15 29 30
    program <stringValue> (47)
        on left: 14 15 16 17 18 19 20
        on right: 1 3 14 15 16 18 19
    out <stringValue> (48)
        on left: 21 22 23 24 25
        on right: 19 21 22 24 25
    var <stringValue> (49)
        on left: 26 27 28 29 30
        on right: 14
    operation <stringValue> (50)
        on left: 31 32
        on right: 26 27 31
    assignment <stringValue> (51)
        on left: 33 34 35
        on right: 9 10 17 26 27 31 37
    rule <stringValue> (52)
        on left: 36 37
        on right: 16 36
    arrow <stringValue> (53)
        on left: 38 39
        on right: 16
    operator <stringValue> (54)
        on left: 40 41 42 43 44 45 46 47 48 49
        on right: 16 36
    op <stringValue> (55)
        on left: 50 51 52 53
        on right: 31 40


State 0

    0 $accept: . start $end

    INT     shift, and go to state 1
    STRING  shift, and go to state 2
    MAIN    shift, and go to state 3

    start     go to state 4
    function  go to state 5
    type      go to state 6


State 1

    4 type: INT .

    $default  reduce using rule 4 (type)


State 2

    5 type: STRING .

    $default  reduce using rule 5 (type)


State 3

    1 start: MAIN . EXEC program END_EXEC

    EXEC  shift, and go to state 7


State 4

    0 $accept: start . $end

    $end  shift, and go to state 8


State 5

    2 start: function . start

    INT     shift, and go to state 1
    STRING  shift, and go to state 2
    MAIN    shift, and go to state 3

    start     go to state 9
    function  go to state 5
    type      go to state 6


State 6

    3 function: type . FUNCTION ALPHA OPEN_P params CLOSE_P EXEC program END_EXEC

    FUNCTION  shift, and go to state 10


State 7

    1 start: MAIN EXEC . program END_EXEC

    ALPHA   shift, and go to state 11
    INT     shift, and go to state 1
    STRING  shift, and go to state 2
    OPEN_P  shift, and go to state 12
    RETURN  shift, and go to state 13
    STDIN   shift, and go to state 14
    STDOUT  shift, and go to state 15

    $default  reduce using rule 20 (program)

    type     go to state 16
    call     go to state 17
    program  go to state 18
    var      go to state 19


State 8

    0 $accept: start $end .

    $default  accept


State 9

    2 start: function start .

    $default  reduce using rule 2 (start)


State 10

    3 function: type FUNCTION . ALPHA OPEN_P params CLOSE_P EXEC program END_EXEC

    ALPHA  shift, and go to state 20


State 11

   13 call: ALPHA . OPEN_P args CLOSE_P
   27 var: ALPHA . ASSIGN assignment operation
   30    | ALPHA . ASSIGN call

    OPEN_P  shift, and go to state 21
    ASSIGN  shift, and go to state 22


State 12

   16 program: OPEN_P . rule operator rule CLOSE_P CONDITIONAL arrow EXEC program END_EXEC program

    DIGIT         shift, and go to state 23
    ALPHA         shift, and go to state 24
    STRING_VALUE  shift, and go to state 25
    OPEN_P        shift, and go to state 26

    assignment  go to state 27
    rule        go to state 28


State 13

   17 program: RETURN . assignment END

    DIGIT         shift, and go to state 23
    ALPHA         shift, and go to state 24
    STRING_VALUE  shift, and go to state 25

    assignment  go to state 29


State 14

   18 program: STDIN . OPEN_P ALPHA CLOSE_P END program

    OPEN_P  shift, and go to state 30


State 15

   19 program: STDOUT . out END program

    ALPHA        shift, and go to state 31
    SPACE_ALPHA  shift, and go to state 32
    ESCAPE       shift, and go to state 33

    $default  reduce using rule 23 (out)

    out  go to state 34


State 16

   26 var: type . ALPHA ASSIGN assignment operation
   28    | type . ALPHA
   29    | type . ALPHA ASSIGN call

    ALPHA  shift, and go to state 35


State 17

   15 program: call . END program

    END  shift, and go to state 36


State 18

    1 start: MAIN EXEC program . END_EXEC

    END_EXEC  shift, and go to state 37


State 19

   14 program: var . END program

    END  shift, and go to state 38


State 20

    3 function: type FUNCTION ALPHA . OPEN_P params CLOSE_P EXEC program END_EXEC

    OPEN_P  shift, and go to state 39


State 21

   13 call: ALPHA OPEN_P . args CLOSE_P

    DIGIT         shift, and go to state 23
    ALPHA         shift, and go to state 40
    STRING_VALUE  shift, and go to state 25

    $default  reduce using rule 12 (args)

    args        go to state 41
    call        go to state 42
    assignment  go to state 43


State 22

   27 var: ALPHA ASSIGN . assignment operation
   30    | ALPHA ASSIGN . call

    DIGIT         shift, and go to state 23
    ALPHA         shift, and go to state 40
    STRING_VALUE  shift, and go to state 25

    call        go to state 44
    assignment  go to state 45


State 23

   34 assignment: DIGIT .

    $default  reduce using rule 34 (assignment)


State 24

   33 assignment: ALPHA .

    $default  reduce using rule 33 (assignment)


State 25

   35 assignment: STRING_VALUE .

    $default  reduce using rule 35 (assignment)


State 26

   36 rule: OPEN_P . rule operator rule CLOSE_P

    DIGIT         shift, and go to state 23
    ALPHA         shift, and go to state 24
    STRING_VALUE  shift, and go to state 25
    OPEN_P        shift, and go to state 26

    assignment  go to state 27
    rule        go to state 46


State 27

   37 rule: assignment .

    $default  reduce using rule 37 (rule)


State 28

   16 program: OPEN_P rule . operator rule CLOSE_P CONDITIONAL arrow EXEC program END_EXEC program

    PLUS   shift, and go to state 47
    MINUS  shift, and go to state 48
    TIMES  shift, and go to state 49
    DIV    shift, and go to state 50
    L      shift, and go to state 51
    G      shift, and go to state 52
    LE     shift, and go to state 53
    GE     shift, and go to state 54
    EQ     shift, and go to state 55
    NE     shift, and go to state 56
    NOT    shift, and go to state 57
    OR     shift, and go to state 58
    AND    shift, and go to state 59

    operator  go to state 60
    op        go to state 61


State 29

   17 program: RETURN assignment . END

    END  shift, and go to state 62


State 30

   18 program: STDIN OPEN_P . ALPHA CLOSE_P END program

    ALPHA  shift, and go to state 63


State 31

   24 out: ALPHA . out

    ALPHA        shift, and go to state 31
    SPACE_ALPHA  shift, and go to state 32
    ESCAPE       shift, and go to state 33

    $default  reduce using rule 23 (out)

    out  go to state 64


State 32

   21 out: SPACE_ALPHA . out

    ALPHA        shift, and go to state 31
    SPACE_ALPHA  shift, and go to state 32
    ESCAPE       shift, and go to state 33

    $default  reduce using rule 23 (out)

    out  go to state 65


State 33

   22 out: ESCAPE . SPACE_ALPHA ESCAPE out
   25    | ESCAPE . ALPHA ESCAPE out

    ALPHA        shift, and go to state 66
    SPACE_ALPHA  shift, and go to state 67


State 34

   19 program: STDOUT out . END program

    END  shift, and go to state 68


State 35

   26 var: type ALPHA . ASSIGN assignment operation
   28    | type ALPHA .
   29    | type ALPHA . ASSIGN call

    ASSIGN  shift, and go to state 69

    $default  reduce using rule 28 (var)


State 36

   15 program: call END . program

    ALPHA   shift, and go to state 11
    INT     shift, and go to state 1
    STRING  shift, and go to state 2
    OPEN_P  shift, and go to state 12
    RETURN  shift, and go to state 13
    STDIN   shift, and go to state 14
    STDOUT  shift, and go to state 15

    $default  reduce using rule 20 (program)

    type     go to state 16
    call     go to state 17
    program  go to state 70
    var      go to state 19


State 37

    1 start: MAIN EXEC program END_EXEC .

    $default  reduce using rule 1 (start)


State 38

   14 program: var END . program

    ALPHA   shift, and go to state 11
    INT     shift, and go to state 1
    STRING  shift, and go to state 2
    OPEN_P  shift, and go to state 12
    RETURN  shift, and go to state 13
    STDIN   shift, and go to state 14
    STDOUT  shift, and go to state 15

    $default  reduce using rule 20 (program)

    type     go to state 16
    call     go to state 17
    program  go to state 71
    var      go to state 19


State 39

    3 function: type FUNCTION ALPHA OPEN_P . params CLOSE_P EXEC program END_EXEC

    INT     shift, and go to state 1
    STRING  shift, and go to state 2

    $default  reduce using rule 8 (params)

    type    go to state 72
    params  go to state 73


State 40

   13 call: ALPHA . OPEN_P args CLOSE_P
   33 assignment: ALPHA .

    OPEN_P  shift, and go to state 21

    $default  reduce using rule 33 (assignment)


State 41

   13 call: ALPHA OPEN_P args . CLOSE_P

    CLOSE_P  shift, and go to state 74


State 42

   11 args: call .

    $default  reduce using rule 11 (args)


State 43

    9 args: assignment .
   10     | assignment . COMMA args

    COMMA  shift, and go to state 75

    $default  reduce using rule 9 (args)


State 44

   30 var: ALPHA ASSIGN call .

    $default  reduce using rule 30 (var)


State 45

   27 var: ALPHA ASSIGN assignment . operation

    PLUS   shift, and go to state 47
    MINUS  shift, and go to state 48
    TIMES  shift, and go to state 49
    DIV    shift, and go to state 50

    $default  reduce using rule 32 (operation)

    operation  go to state 76
    op         go to state 77


State 46

   36 rule: OPEN_P rule . operator rule CLOSE_P

    PLUS   shift, and go to state 47
    MINUS  shift, and go to state 48
    TIMES  shift, and go to state 49
    DIV    shift, and go to state 50
    L      shift, and go to state 51
    G      shift, and go to state 52
    LE     shift, and go to state 53
    GE     shift, and go to state 54
    EQ     shift, and go to state 55
    NE     shift, and go to state 56
    NOT    shift, and go to state 57
    OR     shift, and go to state 58
    AND    shift, and go to state 59

    operator  go to state 78
    op        go to state 61


State 47

   50 op: PLUS .

    $default  reduce using rule 50 (op)


State 48

   51 op: MINUS .

    $default  reduce using rule 51 (op)


State 49

   53 op: TIMES .

    $default  reduce using rule 53 (op)


State 50

   52 op: DIV .

    $default  reduce using rule 52 (op)


State 51

   41 operator: L .

    $default  reduce using rule 41 (operator)


State 52

   42 operator: G .

    $default  reduce using rule 42 (operator)


State 53

   43 operator: LE .

    $default  reduce using rule 43 (operator)


State 54

   44 operator: GE .

    $default  reduce using rule 44 (operator)


State 55

   45 operator: EQ .

    $default  reduce using rule 45 (operator)


State 56

   46 operator: NE .

    $default  reduce using rule 46 (operator)


State 57

   47 operator: NOT .

    $default  reduce using rule 47 (operator)


State 58

   48 operator: OR .

    $default  reduce using rule 48 (operator)


State 59

   49 operator: AND .

    $default  reduce using rule 49 (operator)


State 60

   16 program: OPEN_P rule operator . rule CLOSE_P CONDITIONAL arrow EXEC program END_EXEC program

    DIGIT         shift, and go to state 23
    ALPHA         shift, and go to state 24
    STRING_VALUE  shift, and go to state 25
    OPEN_P        shift, and go to state 26

    assignment  go to state 27
    rule        go to state 79


State 61

   40 operator: op .

    $default  reduce using rule 40 (operator)


State 62

   17 program: RETURN assignment END .

    $default  reduce using rule 17 (program)


State 63

   18 program: STDIN OPEN_P ALPHA . CLOSE_P END program

    CLOSE_P  shift, and go to state 80


State 64

   24 out: ALPHA out .

    $default  reduce using rule 24 (out)


State 65

   21 out: SPACE_ALPHA out .

    $default  reduce using rule 21 (out)


State 66

   25 out: ESCAPE ALPHA . ESCAPE out

    ESCAPE  shift, and go to state 81


State 67

   22 out: ESCAPE SPACE_ALPHA . ESCAPE out

    ESCAPE  shift, and go to state 82


State 68

   19 program: STDOUT out END . program

    ALPHA   shift, and go to state 11
    INT     shift, and go to state 1
    STRING  shift, and go to state 2
    OPEN_P  shift, and go to state 12
    RETURN  shift, and go to state 13
    STDIN   shift, and go to state 14
    STDOUT  shift, and go to state 15

    $default  reduce using rule 20 (program)

    type     go to state 16
    call     go to state 17
    program  go to state 83
    var      go to state 19


State 69

   26 var: type ALPHA ASSIGN . assignment operation
   29    | type ALPHA ASSIGN . call

    DIGIT         shift, and go to state 23
    ALPHA         shift, and go to state 40
    STRING_VALUE  shift, and go to state 25

    call        go to state 84
    assignment  go to state 85


State 70

   15 program: call END program .

    $default  reduce using rule 15 (program)


State 71

   14 program: var END program .

    $default  reduce using rule 14 (program)


State 72

    6 params: type . ALPHA
    7       | type . ALPHA COMMA params

    ALPHA  shift, and go to state 86


State 73

    3 function: type FUNCTION ALPHA OPEN_P params . CLOSE_P EXEC program END_EXEC

    CLOSE_P  shift, and go to state 87


State 74

   13 call: ALPHA OPEN_P args CLOSE_P .

    $default  reduce using rule 13 (call)


State 75

   10 args: assignment COMMA . args

    DIGIT         shift, and go to state 23
    ALPHA         shift, and go to state 40
    STRING_VALUE  shift, and go to state 25

    $default  reduce using rule 12 (args)

    args        go to state 88
    call        go to state 42
    assignment  go to state 43


State 76

   27 var: ALPHA ASSIGN assignment operation .

    $default  reduce using rule 27 (var)


State 77

   31 operation: op . assignment operation

    DIGIT         shift, and go to state 23
    ALPHA         shift, and go to state 24
    STRING_VALUE  shift, and go to state 25

    assignment  go to state 89


State 78

   36 rule: OPEN_P rule operator . rule CLOSE_P

    DIGIT         shift, and go to state 23
    ALPHA         shift, and go to state 24
    STRING_VALUE  shift, and go to state 25
    OPEN_P        shift, and go to state 26

    assignment  go to state 27
    rule        go to state 90


State 79

   16 program: OPEN_P rule operator rule . CLOSE_P CONDITIONAL arrow EXEC program END_EXEC program

    CLOSE_P  shift, and go to state 91


State 80

   18 program: STDIN OPEN_P ALPHA CLOSE_P . END program

    END  shift, and go to state 92


State 81

   25 out: ESCAPE ALPHA ESCAPE . out

    ALPHA        shift, and go to state 31
    SPACE_ALPHA  shift, and go to state 32
    ESCAPE       shift, and go to state 33

    $default  reduce using rule 23 (out)

    out  go to state 93


State 82

   22 out: ESCAPE SPACE_ALPHA ESCAPE . out

    ALPHA        shift, and go to state 31
    SPACE_ALPHA  shift, and go to state 32
    ESCAPE       shift, and go to state 33

    $default  reduce using rule 23 (out)

    out  go to state 94


State 83

   19 program: STDOUT out END program .

    $default  reduce using rule 19 (program)


State 84

   29 var: type ALPHA ASSIGN call .

    $default  reduce using rule 29 (var)


State 85

   26 var: type ALPHA ASSIGN assignment . operation

    PLUS   shift, and go to state 47
    MINUS  shift, and go to state 48
    TIMES  shift, and go to state 49
    DIV    shift, and go to state 50

    $default  reduce using rule 32 (operation)

    operation  go to state 95
    op         go to state 77


State 86

    6 params: type ALPHA .
    7       | type ALPHA . COMMA params

    COMMA  shift, and go to state 96

    $default  reduce using rule 6 (params)


State 87

    3 function: type FUNCTION ALPHA OPEN_P params CLOSE_P . EXEC program END_EXEC

    EXEC  shift, and go to state 97


State 88

   10 args: assignment COMMA args .

    $default  reduce using rule 10 (args)


State 89

   31 operation: op assignment . operation

    PLUS   shift, and go to state 47
    MINUS  shift, and go to state 48
    TIMES  shift, and go to state 49
    DIV    shift, and go to state 50

    $default  reduce using rule 32 (operation)

    operation  go to state 98
    op         go to state 77


State 90

   36 rule: OPEN_P rule operator rule . CLOSE_P

    CLOSE_P  shift, and go to state 99


State 91

   16 program: OPEN_P rule operator rule CLOSE_P . CONDITIONAL arrow EXEC program END_EXEC program

    CONDITIONAL  shift, and go to state 100


State 92

   18 program: STDIN OPEN_P ALPHA CLOSE_P END . program

    ALPHA   shift, and go to state 11
    INT     shift, and go to state 1
    STRING  shift, and go to state 2
    OPEN_P  shift, and go to state 12
    RETURN  shift, and go to state 13
    STDIN   shift, and go to state 14
    STDOUT  shift, and go to state 15

    $default  reduce using rule 20 (program)

    type     go to state 16
    call     go to state 17
    program  go to state 101
    var      go to state 19


State 93

   25 out: ESCAPE ALPHA ESCAPE out .

    $default  reduce using rule 25 (out)


State 94

   22 out: ESCAPE SPACE_ALPHA ESCAPE out .

    $default  reduce using rule 22 (out)


State 95

   26 var: type ALPHA ASSIGN assignment operation .

    $default  reduce using rule 26 (var)


State 96

    7 params: type ALPHA COMMA . params

    INT     shift, and go to state 1
    STRING  shift, and go to state 2

    $default  reduce using rule 8 (params)

    type    go to state 72
    params  go to state 102


State 97

    3 function: type FUNCTION ALPHA OPEN_P params CLOSE_P EXEC . program END_EXEC

    ALPHA   shift, and go to state 11
    INT     shift, and go to state 1
    STRING  shift, and go to state 2
    OPEN_P  shift, and go to state 12
    RETURN  shift, and go to state 13
    STDIN   shift, and go to state 14
    STDOUT  shift, and go to state 15

    $default  reduce using rule 20 (program)

    type     go to state 16
    call     go to state 17
    program  go to state 103
    var      go to state 19


State 98

   31 operation: op assignment operation .

    $default  reduce using rule 31 (operation)


State 99

   36 rule: OPEN_P rule operator rule CLOSE_P .

    $default  reduce using rule 36 (rule)


State 100

   16 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL . arrow EXEC program END_EXEC program

    IF     shift, and go to state 104
    WHILE  shift, and go to state 105

    arrow  go to state 106


State 101

   18 program: STDIN OPEN_P ALPHA CLOSE_P END program .

    $default  reduce using rule 18 (program)


State 102

    7 params: type ALPHA COMMA params .

    $default  reduce using rule 7 (params)


State 103

    3 function: type FUNCTION ALPHA OPEN_P params CLOSE_P EXEC program . END_EXEC

    END_EXEC  shift, and go to state 107


State 104

   39 arrow: IF .

    $default  reduce using rule 39 (arrow)


State 105

   38 arrow: WHILE .

    $default  reduce using rule 38 (arrow)


State 106

   16 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL arrow . EXEC program END_EXEC program

    EXEC  shift, and go to state 108


State 107

    3 function: type FUNCTION ALPHA OPEN_P params CLOSE_P EXEC program END_EXEC .

    $default  reduce using rule 3 (function)


State 108

   16 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL arrow EXEC . program END_EXEC program

    ALPHA   shift, and go to state 11
    INT     shift, and go to state 1
    STRING  shift, and go to state 2
    OPEN_P  shift, and go to state 12
    RETURN  shift, and go to state 13
    STDIN   shift, and go to state 14
    STDOUT  shift, and go to state 15

    $default  reduce using rule 20 (program)

    type     go to state 16
    call     go to state 17
    program  go to state 109
    var      go to state 19


State 109

   16 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL arrow EXEC program . END_EXEC program

    END_EXEC  shift, and go to state 110


State 110

   16 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL arrow EXEC program END_EXEC . program

    ALPHA   shift, and go to state 11
    INT     shift, and go to state 1
    STRING  shift, and go to state 2
    OPEN_P  shift, and go to state 12
    RETURN  shift, and go to state 13
    STDIN   shift, and go to state 14
    STDOUT  shift, and go to state 15

    $default  reduce using rule 20 (program)

    type     go to state 16
    call     go to state 17
    program  go to state 111
    var      go to state 19


State 111

   16 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL arrow EXEC program END_EXEC program .

    $default  reduce using rule 16 (program)
