Terminals unused in grammar

    ELSE


Grammar

    0 $accept: start $end

    1 start: MAIN EXEC program END_EXEC
    2      | function start

    3 function: type FUNCTION ALPHA OPEN_P params CLOSE_P EXEC program END_EXEC

    4 type: INT
    5     | STRING

    6 params: type ALPHA
    7       | type ALPHA COMMA params
    8       | %empty

    9 args: assignment
   10     | assignment COMMA args
   11     | call
   12     | %empty

   13 call: ALPHA OPEN_P args CLOSE_P

   14 program: var END program
   15        | call END program
   16        | OPEN_P rule operator rule CLOSE_P CONDITIONAL arrow EXEC program END_EXEC program
   17        | RETURN assignment END
   18        | STDIN OPEN_P ALPHA CLOSE_P END program
   19        | STDOUT OPEN_P out CLOSE_P END program
   20        | %empty

   21 out: ALPHA out
   22    | ESCAPE ALPHA ESCAPE out
   23    | %empty

   24 var: type ALPHA ASSIGN assignment operation
   25    | ALPHA ASSIGN assignment operation
   26    | type ALPHA
   27    | type ALPHA ASSIGN call
   28    | ALPHA ASSIGN call

   29 operation: OP assignment operation
   30          | %empty

   31 assignment: ALPHA
   32           | DIGIT

   33 rule: OPEN_P rule operator rule CLOSE_P
   34     | assignment

   35 arrow: WHILE
   36      | IF

   37 operator: OP
   38         | L
   39         | G
   40         | LE
   41         | GE
   42         | EQ
   43         | NOT
   44         | OR
   45         | AND


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    DIGIT <stringValue> (258) 32
    ALPHA <stringValue> (259) 3 6 7 13 18 21 22 24 25 26 27 28 31
    END (260) 14 15 17 18 19
    OPEN_P (261) 3 13 16 18 19 33
    CLOSE_P (262) 3 13 16 18 19 33
    CONDITIONAL (263) 16
    EXEC (264) 1 3 16
    END_EXEC (265) 1 3 16
    IF (266) 36
    ELSE (267)
    ESCAPE (268) 22
    WHILE (269) 35
    L (270) 38
    G (271) 39
    LE (272) 40
    GE (273) 41
    EQ (274) 42
    NOT (275) 43
    OR (276) 44
    AND (277) 45
    ASSIGN (278) 24 25 27 28
    INT <stringValue> (279) 4
    STRING <stringValue> (280) 5
    OP <stringValue> (281) 29 37
    RETURN (282) 17
    MAIN (283) 1
    STDIN (284) 18
    STDOUT (285) 19
    FUNCTION (286) 3
    COMMA (287) 7 10


Nonterminals, with rules where they appear

    $accept (33)
        on left: 0
    start <stringValue> (34)
        on left: 1 2
        on right: 0 2
    function <stringValue> (35)
        on left: 3
        on right: 2
    type <stringValue> (36)
        on left: 4 5
        on right: 3 6 7 24 26 27
    params <stringValue> (37)
        on left: 6 7 8
        on right: 3 7
    args <stringValue> (38)
        on left: 9 10 11 12
        on right: 10 13
    call <stringValue> (39)
        on left: 13
        on right: 11 15 27 28
    program <stringValue> (40)
        on left: 14 15 16 17 18 19 20
        on right: 1 3 14 15 16 18 19
    out <stringValue> (41)
        on left: 21 22 23
        on right: 19 21 22
    var <stringValue> (42)
        on left: 24 25 26 27 28
        on right: 14
    operation <stringValue> (43)
        on left: 29 30
        on right: 24 25 29
    assignment <stringValue> (44)
        on left: 31 32
        on right: 9 10 17 24 25 29 34
    rule <stringValue> (45)
        on left: 33 34
        on right: 16 33
    arrow <stringValue> (46)
        on left: 35 36
        on right: 16
    operator <stringValue> (47)
        on left: 37 38 39 40 41 42 43 44 45
        on right: 16 33


State 0

    0 $accept: . start $end

    INT     shift, and go to state 1
    STRING  shift, and go to state 2
    MAIN    shift, and go to state 3

    start     go to state 4
    function  go to state 5
    type      go to state 6


State 1

    4 type: INT .

    $default  reduce using rule 4 (type)


State 2

    5 type: STRING .

    $default  reduce using rule 5 (type)


State 3

    1 start: MAIN . EXEC program END_EXEC

    EXEC  shift, and go to state 7


State 4

    0 $accept: start . $end

    $end  shift, and go to state 8


State 5

    2 start: function . start

    INT     shift, and go to state 1
    STRING  shift, and go to state 2
    MAIN    shift, and go to state 3

    start     go to state 9
    function  go to state 5
    type      go to state 6


State 6

    3 function: type . FUNCTION ALPHA OPEN_P params CLOSE_P EXEC program END_EXEC

    FUNCTION  shift, and go to state 10


State 7

    1 start: MAIN EXEC . program END_EXEC

    ALPHA   shift, and go to state 11
    OPEN_P  shift, and go to state 12
    INT     shift, and go to state 1
    STRING  shift, and go to state 2
    RETURN  shift, and go to state 13
    STDIN   shift, and go to state 14
    STDOUT  shift, and go to state 15

    $default  reduce using rule 20 (program)

    type     go to state 16
    call     go to state 17
    program  go to state 18
    var      go to state 19


State 8

    0 $accept: start $end .

    $default  accept


State 9

    2 start: function start .

    $default  reduce using rule 2 (start)


State 10

    3 function: type FUNCTION . ALPHA OPEN_P params CLOSE_P EXEC program END_EXEC

    ALPHA  shift, and go to state 20


State 11

   13 call: ALPHA . OPEN_P args CLOSE_P
   25 var: ALPHA . ASSIGN assignment operation
   28    | ALPHA . ASSIGN call

    OPEN_P  shift, and go to state 21
    ASSIGN  shift, and go to state 22


State 12

   16 program: OPEN_P . rule operator rule CLOSE_P CONDITIONAL arrow EXEC program END_EXEC program

    DIGIT   shift, and go to state 23
    ALPHA   shift, and go to state 24
    OPEN_P  shift, and go to state 25

    assignment  go to state 26
    rule        go to state 27


State 13

   17 program: RETURN . assignment END

    DIGIT  shift, and go to state 23
    ALPHA  shift, and go to state 24

    assignment  go to state 28


State 14

   18 program: STDIN . OPEN_P ALPHA CLOSE_P END program

    OPEN_P  shift, and go to state 29


State 15

   19 program: STDOUT . OPEN_P out CLOSE_P END program

    OPEN_P  shift, and go to state 30


State 16

   24 var: type . ALPHA ASSIGN assignment operation
   26    | type . ALPHA
   27    | type . ALPHA ASSIGN call

    ALPHA  shift, and go to state 31


State 17

   15 program: call . END program

    END  shift, and go to state 32


State 18

    1 start: MAIN EXEC program . END_EXEC

    END_EXEC  shift, and go to state 33


State 19

   14 program: var . END program

    END  shift, and go to state 34


State 20

    3 function: type FUNCTION ALPHA . OPEN_P params CLOSE_P EXEC program END_EXEC

    OPEN_P  shift, and go to state 35


State 21

   13 call: ALPHA OPEN_P . args CLOSE_P

    DIGIT  shift, and go to state 23
    ALPHA  shift, and go to state 36

    $default  reduce using rule 12 (args)

    args        go to state 37
    call        go to state 38
    assignment  go to state 39


State 22

   25 var: ALPHA ASSIGN . assignment operation
   28    | ALPHA ASSIGN . call

    DIGIT  shift, and go to state 23
    ALPHA  shift, and go to state 36

    call        go to state 40
    assignment  go to state 41


State 23

   32 assignment: DIGIT .

    $default  reduce using rule 32 (assignment)


State 24

   31 assignment: ALPHA .

    $default  reduce using rule 31 (assignment)


State 25

   33 rule: OPEN_P . rule operator rule CLOSE_P

    DIGIT   shift, and go to state 23
    ALPHA   shift, and go to state 24
    OPEN_P  shift, and go to state 25

    assignment  go to state 26
    rule        go to state 42


State 26

   34 rule: assignment .

    $default  reduce using rule 34 (rule)


State 27

   16 program: OPEN_P rule . operator rule CLOSE_P CONDITIONAL arrow EXEC program END_EXEC program

    L    shift, and go to state 43
    G    shift, and go to state 44
    LE   shift, and go to state 45
    GE   shift, and go to state 46
    EQ   shift, and go to state 47
    NOT  shift, and go to state 48
    OR   shift, and go to state 49
    AND  shift, and go to state 50
    OP   shift, and go to state 51

    operator  go to state 52


State 28

   17 program: RETURN assignment . END

    END  shift, and go to state 53


State 29

   18 program: STDIN OPEN_P . ALPHA CLOSE_P END program

    ALPHA  shift, and go to state 54


State 30

   19 program: STDOUT OPEN_P . out CLOSE_P END program

    ALPHA   shift, and go to state 55
    ESCAPE  shift, and go to state 56

    $default  reduce using rule 23 (out)

    out  go to state 57


State 31

   24 var: type ALPHA . ASSIGN assignment operation
   26    | type ALPHA .
   27    | type ALPHA . ASSIGN call

    ASSIGN  shift, and go to state 58

    $default  reduce using rule 26 (var)


State 32

   15 program: call END . program

    ALPHA   shift, and go to state 11
    OPEN_P  shift, and go to state 12
    INT     shift, and go to state 1
    STRING  shift, and go to state 2
    RETURN  shift, and go to state 13
    STDIN   shift, and go to state 14
    STDOUT  shift, and go to state 15

    $default  reduce using rule 20 (program)

    type     go to state 16
    call     go to state 17
    program  go to state 59
    var      go to state 19


State 33

    1 start: MAIN EXEC program END_EXEC .

    $default  reduce using rule 1 (start)


State 34

   14 program: var END . program

    ALPHA   shift, and go to state 11
    OPEN_P  shift, and go to state 12
    INT     shift, and go to state 1
    STRING  shift, and go to state 2
    RETURN  shift, and go to state 13
    STDIN   shift, and go to state 14
    STDOUT  shift, and go to state 15

    $default  reduce using rule 20 (program)

    type     go to state 16
    call     go to state 17
    program  go to state 60
    var      go to state 19


State 35

    3 function: type FUNCTION ALPHA OPEN_P . params CLOSE_P EXEC program END_EXEC

    INT     shift, and go to state 1
    STRING  shift, and go to state 2

    $default  reduce using rule 8 (params)

    type    go to state 61
    params  go to state 62


State 36

   13 call: ALPHA . OPEN_P args CLOSE_P
   31 assignment: ALPHA .

    OPEN_P  shift, and go to state 21

    $default  reduce using rule 31 (assignment)


State 37

   13 call: ALPHA OPEN_P args . CLOSE_P

    CLOSE_P  shift, and go to state 63


State 38

   11 args: call .

    $default  reduce using rule 11 (args)


State 39

    9 args: assignment .
   10     | assignment . COMMA args

    COMMA  shift, and go to state 64

    $default  reduce using rule 9 (args)


State 40

   28 var: ALPHA ASSIGN call .

    $default  reduce using rule 28 (var)


State 41

   25 var: ALPHA ASSIGN assignment . operation

    OP  shift, and go to state 65

    $default  reduce using rule 30 (operation)

    operation  go to state 66


State 42

   33 rule: OPEN_P rule . operator rule CLOSE_P

    L    shift, and go to state 43
    G    shift, and go to state 44
    LE   shift, and go to state 45
    GE   shift, and go to state 46
    EQ   shift, and go to state 47
    NOT  shift, and go to state 48
    OR   shift, and go to state 49
    AND  shift, and go to state 50
    OP   shift, and go to state 51

    operator  go to state 67


State 43

   38 operator: L .

    $default  reduce using rule 38 (operator)


State 44

   39 operator: G .

    $default  reduce using rule 39 (operator)


State 45

   40 operator: LE .

    $default  reduce using rule 40 (operator)


State 46

   41 operator: GE .

    $default  reduce using rule 41 (operator)


State 47

   42 operator: EQ .

    $default  reduce using rule 42 (operator)


State 48

   43 operator: NOT .

    $default  reduce using rule 43 (operator)


State 49

   44 operator: OR .

    $default  reduce using rule 44 (operator)


State 50

   45 operator: AND .

    $default  reduce using rule 45 (operator)


State 51

   37 operator: OP .

    $default  reduce using rule 37 (operator)


State 52

   16 program: OPEN_P rule operator . rule CLOSE_P CONDITIONAL arrow EXEC program END_EXEC program

    DIGIT   shift, and go to state 23
    ALPHA   shift, and go to state 24
    OPEN_P  shift, and go to state 25

    assignment  go to state 26
    rule        go to state 68


State 53

   17 program: RETURN assignment END .

    $default  reduce using rule 17 (program)


State 54

   18 program: STDIN OPEN_P ALPHA . CLOSE_P END program

    CLOSE_P  shift, and go to state 69


State 55

   21 out: ALPHA . out

    ALPHA   shift, and go to state 55
    ESCAPE  shift, and go to state 56

    $default  reduce using rule 23 (out)

    out  go to state 70


State 56

   22 out: ESCAPE . ALPHA ESCAPE out

    ALPHA  shift, and go to state 71


State 57

   19 program: STDOUT OPEN_P out . CLOSE_P END program

    CLOSE_P  shift, and go to state 72


State 58

   24 var: type ALPHA ASSIGN . assignment operation
   27    | type ALPHA ASSIGN . call

    DIGIT  shift, and go to state 23
    ALPHA  shift, and go to state 36

    call        go to state 73
    assignment  go to state 74


State 59

   15 program: call END program .

    $default  reduce using rule 15 (program)


State 60

   14 program: var END program .

    $default  reduce using rule 14 (program)


State 61

    6 params: type . ALPHA
    7       | type . ALPHA COMMA params

    ALPHA  shift, and go to state 75


State 62

    3 function: type FUNCTION ALPHA OPEN_P params . CLOSE_P EXEC program END_EXEC

    CLOSE_P  shift, and go to state 76


State 63

   13 call: ALPHA OPEN_P args CLOSE_P .

    $default  reduce using rule 13 (call)


State 64

   10 args: assignment COMMA . args

    DIGIT  shift, and go to state 23
    ALPHA  shift, and go to state 36

    $default  reduce using rule 12 (args)

    args        go to state 77
    call        go to state 38
    assignment  go to state 39


State 65

   29 operation: OP . assignment operation

    DIGIT  shift, and go to state 23
    ALPHA  shift, and go to state 24

    assignment  go to state 78


State 66

   25 var: ALPHA ASSIGN assignment operation .

    $default  reduce using rule 25 (var)


State 67

   33 rule: OPEN_P rule operator . rule CLOSE_P

    DIGIT   shift, and go to state 23
    ALPHA   shift, and go to state 24
    OPEN_P  shift, and go to state 25

    assignment  go to state 26
    rule        go to state 79


State 68

   16 program: OPEN_P rule operator rule . CLOSE_P CONDITIONAL arrow EXEC program END_EXEC program

    CLOSE_P  shift, and go to state 80


State 69

   18 program: STDIN OPEN_P ALPHA CLOSE_P . END program

    END  shift, and go to state 81


State 70

   21 out: ALPHA out .

    $default  reduce using rule 21 (out)


State 71

   22 out: ESCAPE ALPHA . ESCAPE out

    ESCAPE  shift, and go to state 82


State 72

   19 program: STDOUT OPEN_P out CLOSE_P . END program

    END  shift, and go to state 83


State 73

   27 var: type ALPHA ASSIGN call .

    $default  reduce using rule 27 (var)


State 74

   24 var: type ALPHA ASSIGN assignment . operation

    OP  shift, and go to state 65

    $default  reduce using rule 30 (operation)

    operation  go to state 84


State 75

    6 params: type ALPHA .
    7       | type ALPHA . COMMA params

    COMMA  shift, and go to state 85

    $default  reduce using rule 6 (params)


State 76

    3 function: type FUNCTION ALPHA OPEN_P params CLOSE_P . EXEC program END_EXEC

    EXEC  shift, and go to state 86


State 77

   10 args: assignment COMMA args .

    $default  reduce using rule 10 (args)


State 78

   29 operation: OP assignment . operation

    OP  shift, and go to state 65

    $default  reduce using rule 30 (operation)

    operation  go to state 87


State 79

   33 rule: OPEN_P rule operator rule . CLOSE_P

    CLOSE_P  shift, and go to state 88


State 80

   16 program: OPEN_P rule operator rule CLOSE_P . CONDITIONAL arrow EXEC program END_EXEC program

    CONDITIONAL  shift, and go to state 89


State 81

   18 program: STDIN OPEN_P ALPHA CLOSE_P END . program

    ALPHA   shift, and go to state 11
    OPEN_P  shift, and go to state 12
    INT     shift, and go to state 1
    STRING  shift, and go to state 2
    RETURN  shift, and go to state 13
    STDIN   shift, and go to state 14
    STDOUT  shift, and go to state 15

    $default  reduce using rule 20 (program)

    type     go to state 16
    call     go to state 17
    program  go to state 90
    var      go to state 19


State 82

   22 out: ESCAPE ALPHA ESCAPE . out

    ALPHA   shift, and go to state 55
    ESCAPE  shift, and go to state 56

    $default  reduce using rule 23 (out)

    out  go to state 91


State 83

   19 program: STDOUT OPEN_P out CLOSE_P END . program

    ALPHA   shift, and go to state 11
    OPEN_P  shift, and go to state 12
    INT     shift, and go to state 1
    STRING  shift, and go to state 2
    RETURN  shift, and go to state 13
    STDIN   shift, and go to state 14
    STDOUT  shift, and go to state 15

    $default  reduce using rule 20 (program)

    type     go to state 16
    call     go to state 17
    program  go to state 92
    var      go to state 19


State 84

   24 var: type ALPHA ASSIGN assignment operation .

    $default  reduce using rule 24 (var)


State 85

    7 params: type ALPHA COMMA . params

    INT     shift, and go to state 1
    STRING  shift, and go to state 2

    $default  reduce using rule 8 (params)

    type    go to state 61
    params  go to state 93


State 86

    3 function: type FUNCTION ALPHA OPEN_P params CLOSE_P EXEC . program END_EXEC

    ALPHA   shift, and go to state 11
    OPEN_P  shift, and go to state 12
    INT     shift, and go to state 1
    STRING  shift, and go to state 2
    RETURN  shift, and go to state 13
    STDIN   shift, and go to state 14
    STDOUT  shift, and go to state 15

    $default  reduce using rule 20 (program)

    type     go to state 16
    call     go to state 17
    program  go to state 94
    var      go to state 19


State 87

   29 operation: OP assignment operation .

    $default  reduce using rule 29 (operation)


State 88

   33 rule: OPEN_P rule operator rule CLOSE_P .

    $default  reduce using rule 33 (rule)


State 89

   16 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL . arrow EXEC program END_EXEC program

    IF     shift, and go to state 95
    WHILE  shift, and go to state 96

    arrow  go to state 97


State 90

   18 program: STDIN OPEN_P ALPHA CLOSE_P END program .

    $default  reduce using rule 18 (program)


State 91

   22 out: ESCAPE ALPHA ESCAPE out .

    $default  reduce using rule 22 (out)


State 92

   19 program: STDOUT OPEN_P out CLOSE_P END program .

    $default  reduce using rule 19 (program)


State 93

    7 params: type ALPHA COMMA params .

    $default  reduce using rule 7 (params)


State 94

    3 function: type FUNCTION ALPHA OPEN_P params CLOSE_P EXEC program . END_EXEC

    END_EXEC  shift, and go to state 98


State 95

   36 arrow: IF .

    $default  reduce using rule 36 (arrow)


State 96

   35 arrow: WHILE .

    $default  reduce using rule 35 (arrow)


State 97

   16 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL arrow . EXEC program END_EXEC program

    EXEC  shift, and go to state 99


State 98

    3 function: type FUNCTION ALPHA OPEN_P params CLOSE_P EXEC program END_EXEC .

    $default  reduce using rule 3 (function)


State 99

   16 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL arrow EXEC . program END_EXEC program

    ALPHA   shift, and go to state 11
    OPEN_P  shift, and go to state 12
    INT     shift, and go to state 1
    STRING  shift, and go to state 2
    RETURN  shift, and go to state 13
    STDIN   shift, and go to state 14
    STDOUT  shift, and go to state 15

    $default  reduce using rule 20 (program)

    type     go to state 16
    call     go to state 17
    program  go to state 100
    var      go to state 19


State 100

   16 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL arrow EXEC program . END_EXEC program

    END_EXEC  shift, and go to state 101


State 101

   16 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL arrow EXEC program END_EXEC . program

    ALPHA   shift, and go to state 11
    OPEN_P  shift, and go to state 12
    INT     shift, and go to state 1
    STRING  shift, and go to state 2
    RETURN  shift, and go to state 13
    STDIN   shift, and go to state 14
    STDOUT  shift, and go to state 15

    $default  reduce using rule 20 (program)

    type     go to state 16
    call     go to state 17
    program  go to state 102
    var      go to state 19


State 102

   16 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL arrow EXEC program END_EXEC program .

    $default  reduce using rule 16 (program)
