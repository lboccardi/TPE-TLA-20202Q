Rules useless in parser due to conflicts

   23 get: %empty

   60 arrow: IF


State 8 conflicts: 7 shift/reduce, 1 reduce/reduce
State 22 conflicts: 7 shift/reduce, 1 reduce/reduce
State 43 conflicts: 7 shift/reduce, 1 reduce/reduce
State 46 conflicts: 7 shift/reduce, 1 reduce/reduce
State 56 conflicts: 1 reduce/reduce
State 57 conflicts: 1 reduce/reduce
State 88 conflicts: 7 shift/reduce, 1 reduce/reduce
State 114 conflicts: 7 shift/reduce, 1 reduce/reduce
State 115 conflicts: 7 shift/reduce, 1 reduce/reduce
State 146 conflicts: 1 shift/reduce
State 152 conflicts: 7 shift/reduce, 1 reduce/reduce
State 153 conflicts: 7 shift/reduce, 1 reduce/reduce
State 157 conflicts: 7 shift/reduce, 1 reduce/reduce
State 160 conflicts: 7 shift/reduce, 1 reduce/reduce
State 162 conflicts: 7 shift/reduce, 1 reduce/reduce


Grammar

    0 $accept: start $end

    1 start: MAIN EXEC program END_EXEC
    2      | function start

    3 function: INT FUNCTION ALPHA OPEN_P params CLOSE_P EXEC program END_EXEC
    4         | STRING FUNCTION ALPHA OPEN_P params CLOSE_P EXEC program END_EXEC

    5 type: INT
    6     | STRING

    7 params: type ALPHA
    8       | type ALPHA COMMA params
    9       | %empty

   10 args: assignment
   11     | assignment COMMA args
   12     | call
   13     | %empty

   14 call: ALPHA OPEN_P args CLOSE_P

   15 program: var END program
   16        | call END program
   17        | RETURN assignment END
   18        | get program
   19        | STDOUT out END program
   20        | %empty
   21        | OPEN_P rule operator rule CLOSE_P CONDITIONAL arrow EXEC program END_EXEC program
   22        | OPEN_P rule operator rule CLOSE_P CONDITIONAL IF EXEC program END_EXEC ELSE EXEC program END_EXEC program

   23 get: %empty
   24    | STDIN OPEN_P ALPHA COMMA DIGIT CLOSE_P END

   25 out: SPACE_ALPHA out
   26    | ESCAPE SPACE_ALPHA ESCAPE out
   27    | %empty
   28    | ALPHA out
   29    | ESCAPE ALPHA ESCAPE out

   30 var: INT ALPHA ASSIGN DIGIT operation
   31    | INT ALPHA ASSIGN ALPHA operation
   32    | STRING ALPHA ASSIGN STRING_VALUE
   33    | INT ALPHA ARRAY DIGIT ASSIGN digit_array
   34    | STRING ALPHA ARRAY DIGIT ASSIGN alpha_array
   35    | INT ALPHA
   36    | STRING ALPHA
   37    | INT ALPHA ARRAY DIGIT
   38    | STRING ALPHA ARRAY DIGIT
   39    | ALPHA ASSIGN DIGIT
   40    | ALPHA ASSIGN STRING_VALUE
   41    | ALPHA ASSIGN assignment operation
   42    | INT ALPHA ASSIGN call
   43    | STRING ALPHA ASSIGN call
   44    | ALPHA ASSIGN call
   45    | ALPHA ARRAY DIGIT ASSIGN DIGIT
   46    | ALPHA ARRAY DIGIT ASSIGN STRING_VALUE

   47 operation: op DIGIT operation
   48          | op ALPHA operation
   49          | %empty

   50 assignment: ALPHA
   51           | DIGIT
   52           | STRING_VALUE

   53 alpha_array: STRING_VALUE COMMA alpha_array
   54            | STRING_VALUE

   55 digit_array: DIGIT COMMA digit_array
   56            | DIGIT

   57 rule: OPEN_P rule operator rule CLOSE_P
   58     | assignment

   59 arrow: WHILE
   60      | IF

   61 operator: op
   62         | L
   63         | G
   64         | LE
   65         | GE
   66         | EQ
   67         | NE
   68         | NOT
   69         | OR
   70         | AND

   71 op: PLUS
   72   | MINUS
   73   | DIV
   74   | TIMES
   75   | MOD


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    DIGIT <stringValue> (258) 24 30 33 34 37 38 39 45 46 47 51 55 56
    ALPHA <stringValue> (259) 3 4 7 8 14 24 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 48 50
    SPACE_ALPHA <stringValue> (260) 25 26
    STRING_VALUE <stringValue> (261) 32 40 46 52 53 54
    INT <stringValue> (262) 3 5 30 31 33 35 37 42
    STRING <stringValue> (263) 4 6 32 34 36 38 43
    PLUS <stringValue> (264) 71
    MINUS <stringValue> (265) 72
    TIMES <stringValue> (266) 74
    DIV <stringValue> (267) 73
    MOD <stringValue> (268) 75
    END (269) 15 16 17 19 24
    OPEN_P (270) 3 4 14 21 22 24 57
    CLOSE_P (271) 3 4 14 21 22 24 57
    CONDITIONAL (272) 21 22
    EXEC (273) 1 3 4 21 22
    END_EXEC (274) 1 3 4 21 22
    IF (275) 22 60
    ELSE (276) 22
    ESCAPE (277) 26 29
    WHILE (278) 59
    L (279) 62
    G (280) 63
    LE (281) 64
    GE (282) 65
    EQ (283) 66
    NE (284) 67
    NOT (285) 68
    OR (286) 69
    AND (287) 70
    ASSIGN (288) 30 31 32 33 34 39 40 41 42 43 44 45 46
    RETURN (289) 17
    MAIN (290) 1
    STDIN (291) 24
    STDOUT (292) 19
    FUNCTION (293) 3 4
    COMMA (294) 8 11 24 53 55
    ARRAY (295) 33 34 37 38 45 46


Nonterminals, with rules where they appear

    $accept (41)
        on left: 0
    start <stringValue> (42)
        on left: 1 2
        on right: 0 2
    function <stringValue> (43)
        on left: 3 4
        on right: 2
    type <stringValue> (44)
        on left: 5 6
        on right: 7 8
    params <stringValue> (45)
        on left: 7 8 9
        on right: 3 4 8
    args <stringValue> (46)
        on left: 10 11 12 13
        on right: 11 14
    call <stringValue> (47)
        on left: 14
        on right: 12 16 42 43 44
    program <stringValue> (48)
        on left: 15 16 17 18 19 20 21 22
        on right: 1 3 4 15 16 18 19 21 22
    get <stringValue> (49)
        on left: 23 24
        on right: 18
    out <stringValue> (50)
        on left: 25 26 27 28 29
        on right: 19 25 26 28 29
    var <stringValue> (51)
        on left: 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46
        on right: 15
    operation <stringValue> (52)
        on left: 47 48 49
        on right: 30 31 41 47 48
    assignment <stringValue> (53)
        on left: 50 51 52
        on right: 10 11 17 41 58
    alpha_array <stringValue> (54)
        on left: 53 54
        on right: 34 53
    digit_array <stringValue> (55)
        on left: 55 56
        on right: 33 55
    rule <stringValue> (56)
        on left: 57 58
        on right: 21 22 57
    arrow <stringValue> (57)
        on left: 59 60
        on right: 21
    operator <stringValue> (58)
        on left: 61 62 63 64 65 66 67 68 69 70
        on right: 21 22 57
    op <stringValue> (59)
        on left: 71 72 73 74 75
        on right: 47 48 61


State 0

    0 $accept: . start $end

    INT     shift, and go to state 1
    STRING  shift, and go to state 2
    MAIN    shift, and go to state 3

    start     go to state 4
    function  go to state 5


State 1

    3 function: INT . FUNCTION ALPHA OPEN_P params CLOSE_P EXEC program END_EXEC

    FUNCTION  shift, and go to state 6


State 2

    4 function: STRING . FUNCTION ALPHA OPEN_P params CLOSE_P EXEC program END_EXEC

    FUNCTION  shift, and go to state 7


State 3

    1 start: MAIN . EXEC program END_EXEC

    EXEC  shift, and go to state 8


State 4

    0 $accept: start . $end

    $end  shift, and go to state 9


State 5

    2 start: function . start

    INT     shift, and go to state 1
    STRING  shift, and go to state 2
    MAIN    shift, and go to state 3

    start     go to state 10
    function  go to state 5


State 6

    3 function: INT FUNCTION . ALPHA OPEN_P params CLOSE_P EXEC program END_EXEC

    ALPHA  shift, and go to state 11


State 7

    4 function: STRING FUNCTION . ALPHA OPEN_P params CLOSE_P EXEC program END_EXEC

    ALPHA  shift, and go to state 12


State 8

    1 start: MAIN EXEC . program END_EXEC

    ALPHA   shift, and go to state 13
    INT     shift, and go to state 14
    STRING  shift, and go to state 15
    OPEN_P  shift, and go to state 16
    RETURN  shift, and go to state 17
    STDIN   shift, and go to state 18
    STDOUT  shift, and go to state 19

    ALPHA     [reduce using rule 23 (get)]
    INT       [reduce using rule 23 (get)]
    STRING    [reduce using rule 23 (get)]
    OPEN_P    [reduce using rule 23 (get)]
    END_EXEC  reduce using rule 20 (program)
    END_EXEC  [reduce using rule 23 (get)]
    RETURN    [reduce using rule 23 (get)]
    STDIN     [reduce using rule 23 (get)]
    STDOUT    [reduce using rule 23 (get)]
    $default  reduce using rule 20 (program)

    call     go to state 20
    program  go to state 21
    get      go to state 22
    var      go to state 23


State 9

    0 $accept: start $end .

    $default  accept


State 10

    2 start: function start .

    $default  reduce using rule 2 (start)


State 11

    3 function: INT FUNCTION ALPHA . OPEN_P params CLOSE_P EXEC program END_EXEC

    OPEN_P  shift, and go to state 24


State 12

    4 function: STRING FUNCTION ALPHA . OPEN_P params CLOSE_P EXEC program END_EXEC

    OPEN_P  shift, and go to state 25


State 13

   14 call: ALPHA . OPEN_P args CLOSE_P
   39 var: ALPHA . ASSIGN DIGIT
   40    | ALPHA . ASSIGN STRING_VALUE
   41    | ALPHA . ASSIGN assignment operation
   44    | ALPHA . ASSIGN call
   45    | ALPHA . ARRAY DIGIT ASSIGN DIGIT
   46    | ALPHA . ARRAY DIGIT ASSIGN STRING_VALUE

    OPEN_P  shift, and go to state 26
    ASSIGN  shift, and go to state 27
    ARRAY   shift, and go to state 28


State 14

   30 var: INT . ALPHA ASSIGN DIGIT operation
   31    | INT . ALPHA ASSIGN ALPHA operation
   33    | INT . ALPHA ARRAY DIGIT ASSIGN digit_array
   35    | INT . ALPHA
   37    | INT . ALPHA ARRAY DIGIT
   42    | INT . ALPHA ASSIGN call

    ALPHA  shift, and go to state 29


State 15

   32 var: STRING . ALPHA ASSIGN STRING_VALUE
   34    | STRING . ALPHA ARRAY DIGIT ASSIGN alpha_array
   36    | STRING . ALPHA
   38    | STRING . ALPHA ARRAY DIGIT
   43    | STRING . ALPHA ASSIGN call

    ALPHA  shift, and go to state 30


State 16

   21 program: OPEN_P . rule operator rule CLOSE_P CONDITIONAL arrow EXEC program END_EXEC program
   22        | OPEN_P . rule operator rule CLOSE_P CONDITIONAL IF EXEC program END_EXEC ELSE EXEC program END_EXEC program

    DIGIT         shift, and go to state 31
    ALPHA         shift, and go to state 32
    STRING_VALUE  shift, and go to state 33
    OPEN_P        shift, and go to state 34

    assignment  go to state 35
    rule        go to state 36


State 17

   17 program: RETURN . assignment END

    DIGIT         shift, and go to state 31
    ALPHA         shift, and go to state 32
    STRING_VALUE  shift, and go to state 33

    assignment  go to state 37


State 18

   24 get: STDIN . OPEN_P ALPHA COMMA DIGIT CLOSE_P END

    OPEN_P  shift, and go to state 38


State 19

   19 program: STDOUT . out END program

    ALPHA        shift, and go to state 39
    SPACE_ALPHA  shift, and go to state 40
    ESCAPE       shift, and go to state 41

    $default  reduce using rule 27 (out)

    out  go to state 42


State 20

   16 program: call . END program

    END  shift, and go to state 43


State 21

    1 start: MAIN EXEC program . END_EXEC

    END_EXEC  shift, and go to state 44


State 22

   18 program: get . program

    ALPHA   shift, and go to state 13
    INT     shift, and go to state 14
    STRING  shift, and go to state 15
    OPEN_P  shift, and go to state 16
    RETURN  shift, and go to state 17
    STDIN   shift, and go to state 18
    STDOUT  shift, and go to state 19

    ALPHA     [reduce using rule 23 (get)]
    INT       [reduce using rule 23 (get)]
    STRING    [reduce using rule 23 (get)]
    OPEN_P    [reduce using rule 23 (get)]
    END_EXEC  reduce using rule 20 (program)
    END_EXEC  [reduce using rule 23 (get)]
    RETURN    [reduce using rule 23 (get)]
    STDIN     [reduce using rule 23 (get)]
    STDOUT    [reduce using rule 23 (get)]
    $default  reduce using rule 20 (program)

    call     go to state 20
    program  go to state 45
    get      go to state 22
    var      go to state 23


State 23

   15 program: var . END program

    END  shift, and go to state 46


State 24

    3 function: INT FUNCTION ALPHA OPEN_P . params CLOSE_P EXEC program END_EXEC

    INT     shift, and go to state 47
    STRING  shift, and go to state 48

    $default  reduce using rule 9 (params)

    type    go to state 49
    params  go to state 50


State 25

    4 function: STRING FUNCTION ALPHA OPEN_P . params CLOSE_P EXEC program END_EXEC

    INT     shift, and go to state 47
    STRING  shift, and go to state 48

    $default  reduce using rule 9 (params)

    type    go to state 49
    params  go to state 51


State 26

   14 call: ALPHA OPEN_P . args CLOSE_P

    DIGIT         shift, and go to state 31
    ALPHA         shift, and go to state 52
    STRING_VALUE  shift, and go to state 33

    $default  reduce using rule 13 (args)

    args        go to state 53
    call        go to state 54
    assignment  go to state 55


State 27

   39 var: ALPHA ASSIGN . DIGIT
   40    | ALPHA ASSIGN . STRING_VALUE
   41    | ALPHA ASSIGN . assignment operation
   44    | ALPHA ASSIGN . call

    DIGIT         shift, and go to state 56
    ALPHA         shift, and go to state 52
    STRING_VALUE  shift, and go to state 57

    call        go to state 58
    assignment  go to state 59


State 28

   45 var: ALPHA ARRAY . DIGIT ASSIGN DIGIT
   46    | ALPHA ARRAY . DIGIT ASSIGN STRING_VALUE

    DIGIT  shift, and go to state 60


State 29

   30 var: INT ALPHA . ASSIGN DIGIT operation
   31    | INT ALPHA . ASSIGN ALPHA operation
   33    | INT ALPHA . ARRAY DIGIT ASSIGN digit_array
   35    | INT ALPHA .
   37    | INT ALPHA . ARRAY DIGIT
   42    | INT ALPHA . ASSIGN call

    ASSIGN  shift, and go to state 61
    ARRAY   shift, and go to state 62

    $default  reduce using rule 35 (var)


State 30

   32 var: STRING ALPHA . ASSIGN STRING_VALUE
   34    | STRING ALPHA . ARRAY DIGIT ASSIGN alpha_array
   36    | STRING ALPHA .
   38    | STRING ALPHA . ARRAY DIGIT
   43    | STRING ALPHA . ASSIGN call

    ASSIGN  shift, and go to state 63
    ARRAY   shift, and go to state 64

    $default  reduce using rule 36 (var)


State 31

   51 assignment: DIGIT .

    $default  reduce using rule 51 (assignment)


State 32

   50 assignment: ALPHA .

    $default  reduce using rule 50 (assignment)


State 33

   52 assignment: STRING_VALUE .

    $default  reduce using rule 52 (assignment)


State 34

   57 rule: OPEN_P . rule operator rule CLOSE_P

    DIGIT         shift, and go to state 31
    ALPHA         shift, and go to state 32
    STRING_VALUE  shift, and go to state 33
    OPEN_P        shift, and go to state 34

    assignment  go to state 35
    rule        go to state 65


State 35

   58 rule: assignment .

    $default  reduce using rule 58 (rule)


State 36

   21 program: OPEN_P rule . operator rule CLOSE_P CONDITIONAL arrow EXEC program END_EXEC program
   22        | OPEN_P rule . operator rule CLOSE_P CONDITIONAL IF EXEC program END_EXEC ELSE EXEC program END_EXEC program

    PLUS   shift, and go to state 66
    MINUS  shift, and go to state 67
    TIMES  shift, and go to state 68
    DIV    shift, and go to state 69
    MOD    shift, and go to state 70
    L      shift, and go to state 71
    G      shift, and go to state 72
    LE     shift, and go to state 73
    GE     shift, and go to state 74
    EQ     shift, and go to state 75
    NE     shift, and go to state 76
    NOT    shift, and go to state 77
    OR     shift, and go to state 78
    AND    shift, and go to state 79

    operator  go to state 80
    op        go to state 81


State 37

   17 program: RETURN assignment . END

    END  shift, and go to state 82


State 38

   24 get: STDIN OPEN_P . ALPHA COMMA DIGIT CLOSE_P END

    ALPHA  shift, and go to state 83


State 39

   28 out: ALPHA . out

    ALPHA        shift, and go to state 39
    SPACE_ALPHA  shift, and go to state 40
    ESCAPE       shift, and go to state 41

    $default  reduce using rule 27 (out)

    out  go to state 84


State 40

   25 out: SPACE_ALPHA . out

    ALPHA        shift, and go to state 39
    SPACE_ALPHA  shift, and go to state 40
    ESCAPE       shift, and go to state 41

    $default  reduce using rule 27 (out)

    out  go to state 85


State 41

   26 out: ESCAPE . SPACE_ALPHA ESCAPE out
   29    | ESCAPE . ALPHA ESCAPE out

    ALPHA        shift, and go to state 86
    SPACE_ALPHA  shift, and go to state 87


State 42

   19 program: STDOUT out . END program

    END  shift, and go to state 88


State 43

   16 program: call END . program

    ALPHA   shift, and go to state 13
    INT     shift, and go to state 14
    STRING  shift, and go to state 15
    OPEN_P  shift, and go to state 16
    RETURN  shift, and go to state 17
    STDIN   shift, and go to state 18
    STDOUT  shift, and go to state 19

    ALPHA     [reduce using rule 23 (get)]
    INT       [reduce using rule 23 (get)]
    STRING    [reduce using rule 23 (get)]
    OPEN_P    [reduce using rule 23 (get)]
    END_EXEC  reduce using rule 20 (program)
    END_EXEC  [reduce using rule 23 (get)]
    RETURN    [reduce using rule 23 (get)]
    STDIN     [reduce using rule 23 (get)]
    STDOUT    [reduce using rule 23 (get)]
    $default  reduce using rule 20 (program)

    call     go to state 20
    program  go to state 89
    get      go to state 22
    var      go to state 23


State 44

    1 start: MAIN EXEC program END_EXEC .

    $default  reduce using rule 1 (start)


State 45

   18 program: get program .

    $default  reduce using rule 18 (program)


State 46

   15 program: var END . program

    ALPHA   shift, and go to state 13
    INT     shift, and go to state 14
    STRING  shift, and go to state 15
    OPEN_P  shift, and go to state 16
    RETURN  shift, and go to state 17
    STDIN   shift, and go to state 18
    STDOUT  shift, and go to state 19

    ALPHA     [reduce using rule 23 (get)]
    INT       [reduce using rule 23 (get)]
    STRING    [reduce using rule 23 (get)]
    OPEN_P    [reduce using rule 23 (get)]
    END_EXEC  reduce using rule 20 (program)
    END_EXEC  [reduce using rule 23 (get)]
    RETURN    [reduce using rule 23 (get)]
    STDIN     [reduce using rule 23 (get)]
    STDOUT    [reduce using rule 23 (get)]
    $default  reduce using rule 20 (program)

    call     go to state 20
    program  go to state 90
    get      go to state 22
    var      go to state 23


State 47

    5 type: INT .

    $default  reduce using rule 5 (type)


State 48

    6 type: STRING .

    $default  reduce using rule 6 (type)


State 49

    7 params: type . ALPHA
    8       | type . ALPHA COMMA params

    ALPHA  shift, and go to state 91


State 50

    3 function: INT FUNCTION ALPHA OPEN_P params . CLOSE_P EXEC program END_EXEC

    CLOSE_P  shift, and go to state 92


State 51

    4 function: STRING FUNCTION ALPHA OPEN_P params . CLOSE_P EXEC program END_EXEC

    CLOSE_P  shift, and go to state 93


State 52

   14 call: ALPHA . OPEN_P args CLOSE_P
   50 assignment: ALPHA .

    OPEN_P  shift, and go to state 26

    $default  reduce using rule 50 (assignment)


State 53

   14 call: ALPHA OPEN_P args . CLOSE_P

    CLOSE_P  shift, and go to state 94


State 54

   12 args: call .

    $default  reduce using rule 12 (args)


State 55

   10 args: assignment .
   11     | assignment . COMMA args

    COMMA  shift, and go to state 95

    $default  reduce using rule 10 (args)


State 56

   39 var: ALPHA ASSIGN DIGIT .
   51 assignment: DIGIT .

    END       reduce using rule 39 (var)
    END       [reduce using rule 51 (assignment)]
    $default  reduce using rule 51 (assignment)


State 57

   40 var: ALPHA ASSIGN STRING_VALUE .
   52 assignment: STRING_VALUE .

    END       reduce using rule 40 (var)
    END       [reduce using rule 52 (assignment)]
    $default  reduce using rule 52 (assignment)


State 58

   44 var: ALPHA ASSIGN call .

    $default  reduce using rule 44 (var)


State 59

   41 var: ALPHA ASSIGN assignment . operation

    PLUS   shift, and go to state 66
    MINUS  shift, and go to state 67
    TIMES  shift, and go to state 68
    DIV    shift, and go to state 69
    MOD    shift, and go to state 70

    $default  reduce using rule 49 (operation)

    operation  go to state 96
    op         go to state 97


State 60

   45 var: ALPHA ARRAY DIGIT . ASSIGN DIGIT
   46    | ALPHA ARRAY DIGIT . ASSIGN STRING_VALUE

    ASSIGN  shift, and go to state 98


State 61

   30 var: INT ALPHA ASSIGN . DIGIT operation
   31    | INT ALPHA ASSIGN . ALPHA operation
   42    | INT ALPHA ASSIGN . call

    DIGIT  shift, and go to state 99
    ALPHA  shift, and go to state 100

    call  go to state 101


State 62

   33 var: INT ALPHA ARRAY . DIGIT ASSIGN digit_array
   37    | INT ALPHA ARRAY . DIGIT

    DIGIT  shift, and go to state 102


State 63

   32 var: STRING ALPHA ASSIGN . STRING_VALUE
   43    | STRING ALPHA ASSIGN . call

    ALPHA         shift, and go to state 103
    STRING_VALUE  shift, and go to state 104

    call  go to state 105


State 64

   34 var: STRING ALPHA ARRAY . DIGIT ASSIGN alpha_array
   38    | STRING ALPHA ARRAY . DIGIT

    DIGIT  shift, and go to state 106


State 65

   57 rule: OPEN_P rule . operator rule CLOSE_P

    PLUS   shift, and go to state 66
    MINUS  shift, and go to state 67
    TIMES  shift, and go to state 68
    DIV    shift, and go to state 69
    MOD    shift, and go to state 70
    L      shift, and go to state 71
    G      shift, and go to state 72
    LE     shift, and go to state 73
    GE     shift, and go to state 74
    EQ     shift, and go to state 75
    NE     shift, and go to state 76
    NOT    shift, and go to state 77
    OR     shift, and go to state 78
    AND    shift, and go to state 79

    operator  go to state 107
    op        go to state 81


State 66

   71 op: PLUS .

    $default  reduce using rule 71 (op)


State 67

   72 op: MINUS .

    $default  reduce using rule 72 (op)


State 68

   74 op: TIMES .

    $default  reduce using rule 74 (op)


State 69

   73 op: DIV .

    $default  reduce using rule 73 (op)


State 70

   75 op: MOD .

    $default  reduce using rule 75 (op)


State 71

   62 operator: L .

    $default  reduce using rule 62 (operator)


State 72

   63 operator: G .

    $default  reduce using rule 63 (operator)


State 73

   64 operator: LE .

    $default  reduce using rule 64 (operator)


State 74

   65 operator: GE .

    $default  reduce using rule 65 (operator)


State 75

   66 operator: EQ .

    $default  reduce using rule 66 (operator)


State 76

   67 operator: NE .

    $default  reduce using rule 67 (operator)


State 77

   68 operator: NOT .

    $default  reduce using rule 68 (operator)


State 78

   69 operator: OR .

    $default  reduce using rule 69 (operator)


State 79

   70 operator: AND .

    $default  reduce using rule 70 (operator)


State 80

   21 program: OPEN_P rule operator . rule CLOSE_P CONDITIONAL arrow EXEC program END_EXEC program
   22        | OPEN_P rule operator . rule CLOSE_P CONDITIONAL IF EXEC program END_EXEC ELSE EXEC program END_EXEC program

    DIGIT         shift, and go to state 31
    ALPHA         shift, and go to state 32
    STRING_VALUE  shift, and go to state 33
    OPEN_P        shift, and go to state 34

    assignment  go to state 35
    rule        go to state 108


State 81

   61 operator: op .

    $default  reduce using rule 61 (operator)


State 82

   17 program: RETURN assignment END .

    $default  reduce using rule 17 (program)


State 83

   24 get: STDIN OPEN_P ALPHA . COMMA DIGIT CLOSE_P END

    COMMA  shift, and go to state 109


State 84

   28 out: ALPHA out .

    $default  reduce using rule 28 (out)


State 85

   25 out: SPACE_ALPHA out .

    $default  reduce using rule 25 (out)


State 86

   29 out: ESCAPE ALPHA . ESCAPE out

    ESCAPE  shift, and go to state 110


State 87

   26 out: ESCAPE SPACE_ALPHA . ESCAPE out

    ESCAPE  shift, and go to state 111


State 88

   19 program: STDOUT out END . program

    ALPHA   shift, and go to state 13
    INT     shift, and go to state 14
    STRING  shift, and go to state 15
    OPEN_P  shift, and go to state 16
    RETURN  shift, and go to state 17
    STDIN   shift, and go to state 18
    STDOUT  shift, and go to state 19

    ALPHA     [reduce using rule 23 (get)]
    INT       [reduce using rule 23 (get)]
    STRING    [reduce using rule 23 (get)]
    OPEN_P    [reduce using rule 23 (get)]
    END_EXEC  reduce using rule 20 (program)
    END_EXEC  [reduce using rule 23 (get)]
    RETURN    [reduce using rule 23 (get)]
    STDIN     [reduce using rule 23 (get)]
    STDOUT    [reduce using rule 23 (get)]
    $default  reduce using rule 20 (program)

    call     go to state 20
    program  go to state 112
    get      go to state 22
    var      go to state 23


State 89

   16 program: call END program .

    $default  reduce using rule 16 (program)


State 90

   15 program: var END program .

    $default  reduce using rule 15 (program)


State 91

    7 params: type ALPHA .
    8       | type ALPHA . COMMA params

    COMMA  shift, and go to state 113

    $default  reduce using rule 7 (params)


State 92

    3 function: INT FUNCTION ALPHA OPEN_P params CLOSE_P . EXEC program END_EXEC

    EXEC  shift, and go to state 114


State 93

    4 function: STRING FUNCTION ALPHA OPEN_P params CLOSE_P . EXEC program END_EXEC

    EXEC  shift, and go to state 115


State 94

   14 call: ALPHA OPEN_P args CLOSE_P .

    $default  reduce using rule 14 (call)


State 95

   11 args: assignment COMMA . args

    DIGIT         shift, and go to state 31
    ALPHA         shift, and go to state 52
    STRING_VALUE  shift, and go to state 33

    $default  reduce using rule 13 (args)

    args        go to state 116
    call        go to state 54
    assignment  go to state 55


State 96

   41 var: ALPHA ASSIGN assignment operation .

    $default  reduce using rule 41 (var)


State 97

   47 operation: op . DIGIT operation
   48          | op . ALPHA operation

    DIGIT  shift, and go to state 117
    ALPHA  shift, and go to state 118


State 98

   45 var: ALPHA ARRAY DIGIT ASSIGN . DIGIT
   46    | ALPHA ARRAY DIGIT ASSIGN . STRING_VALUE

    DIGIT         shift, and go to state 119
    STRING_VALUE  shift, and go to state 120


State 99

   30 var: INT ALPHA ASSIGN DIGIT . operation

    PLUS   shift, and go to state 66
    MINUS  shift, and go to state 67
    TIMES  shift, and go to state 68
    DIV    shift, and go to state 69
    MOD    shift, and go to state 70

    $default  reduce using rule 49 (operation)

    operation  go to state 121
    op         go to state 97


State 100

   14 call: ALPHA . OPEN_P args CLOSE_P
   31 var: INT ALPHA ASSIGN ALPHA . operation

    PLUS    shift, and go to state 66
    MINUS   shift, and go to state 67
    TIMES   shift, and go to state 68
    DIV     shift, and go to state 69
    MOD     shift, and go to state 70
    OPEN_P  shift, and go to state 26

    $default  reduce using rule 49 (operation)

    operation  go to state 122
    op         go to state 97


State 101

   42 var: INT ALPHA ASSIGN call .

    $default  reduce using rule 42 (var)


State 102

   33 var: INT ALPHA ARRAY DIGIT . ASSIGN digit_array
   37    | INT ALPHA ARRAY DIGIT .

    ASSIGN  shift, and go to state 123

    $default  reduce using rule 37 (var)


State 103

   14 call: ALPHA . OPEN_P args CLOSE_P

    OPEN_P  shift, and go to state 26


State 104

   32 var: STRING ALPHA ASSIGN STRING_VALUE .

    $default  reduce using rule 32 (var)


State 105

   43 var: STRING ALPHA ASSIGN call .

    $default  reduce using rule 43 (var)


State 106

   34 var: STRING ALPHA ARRAY DIGIT . ASSIGN alpha_array
   38    | STRING ALPHA ARRAY DIGIT .

    ASSIGN  shift, and go to state 124

    $default  reduce using rule 38 (var)


State 107

   57 rule: OPEN_P rule operator . rule CLOSE_P

    DIGIT         shift, and go to state 31
    ALPHA         shift, and go to state 32
    STRING_VALUE  shift, and go to state 33
    OPEN_P        shift, and go to state 34

    assignment  go to state 35
    rule        go to state 125


State 108

   21 program: OPEN_P rule operator rule . CLOSE_P CONDITIONAL arrow EXEC program END_EXEC program
   22        | OPEN_P rule operator rule . CLOSE_P CONDITIONAL IF EXEC program END_EXEC ELSE EXEC program END_EXEC program

    CLOSE_P  shift, and go to state 126


State 109

   24 get: STDIN OPEN_P ALPHA COMMA . DIGIT CLOSE_P END

    DIGIT  shift, and go to state 127


State 110

   29 out: ESCAPE ALPHA ESCAPE . out

    ALPHA        shift, and go to state 39
    SPACE_ALPHA  shift, and go to state 40
    ESCAPE       shift, and go to state 41

    $default  reduce using rule 27 (out)

    out  go to state 128


State 111

   26 out: ESCAPE SPACE_ALPHA ESCAPE . out

    ALPHA        shift, and go to state 39
    SPACE_ALPHA  shift, and go to state 40
    ESCAPE       shift, and go to state 41

    $default  reduce using rule 27 (out)

    out  go to state 129


State 112

   19 program: STDOUT out END program .

    $default  reduce using rule 19 (program)


State 113

    8 params: type ALPHA COMMA . params

    INT     shift, and go to state 47
    STRING  shift, and go to state 48

    $default  reduce using rule 9 (params)

    type    go to state 49
    params  go to state 130


State 114

    3 function: INT FUNCTION ALPHA OPEN_P params CLOSE_P EXEC . program END_EXEC

    ALPHA   shift, and go to state 13
    INT     shift, and go to state 14
    STRING  shift, and go to state 15
    OPEN_P  shift, and go to state 16
    RETURN  shift, and go to state 17
    STDIN   shift, and go to state 18
    STDOUT  shift, and go to state 19

    ALPHA     [reduce using rule 23 (get)]
    INT       [reduce using rule 23 (get)]
    STRING    [reduce using rule 23 (get)]
    OPEN_P    [reduce using rule 23 (get)]
    END_EXEC  reduce using rule 20 (program)
    END_EXEC  [reduce using rule 23 (get)]
    RETURN    [reduce using rule 23 (get)]
    STDIN     [reduce using rule 23 (get)]
    STDOUT    [reduce using rule 23 (get)]
    $default  reduce using rule 20 (program)

    call     go to state 20
    program  go to state 131
    get      go to state 22
    var      go to state 23


State 115

    4 function: STRING FUNCTION ALPHA OPEN_P params CLOSE_P EXEC . program END_EXEC

    ALPHA   shift, and go to state 13
    INT     shift, and go to state 14
    STRING  shift, and go to state 15
    OPEN_P  shift, and go to state 16
    RETURN  shift, and go to state 17
    STDIN   shift, and go to state 18
    STDOUT  shift, and go to state 19

    ALPHA     [reduce using rule 23 (get)]
    INT       [reduce using rule 23 (get)]
    STRING    [reduce using rule 23 (get)]
    OPEN_P    [reduce using rule 23 (get)]
    END_EXEC  reduce using rule 20 (program)
    END_EXEC  [reduce using rule 23 (get)]
    RETURN    [reduce using rule 23 (get)]
    STDIN     [reduce using rule 23 (get)]
    STDOUT    [reduce using rule 23 (get)]
    $default  reduce using rule 20 (program)

    call     go to state 20
    program  go to state 132
    get      go to state 22
    var      go to state 23


State 116

   11 args: assignment COMMA args .

    $default  reduce using rule 11 (args)


State 117

   47 operation: op DIGIT . operation

    PLUS   shift, and go to state 66
    MINUS  shift, and go to state 67
    TIMES  shift, and go to state 68
    DIV    shift, and go to state 69
    MOD    shift, and go to state 70

    $default  reduce using rule 49 (operation)

    operation  go to state 133
    op         go to state 97


State 118

   48 operation: op ALPHA . operation

    PLUS   shift, and go to state 66
    MINUS  shift, and go to state 67
    TIMES  shift, and go to state 68
    DIV    shift, and go to state 69
    MOD    shift, and go to state 70

    $default  reduce using rule 49 (operation)

    operation  go to state 134
    op         go to state 97


State 119

   45 var: ALPHA ARRAY DIGIT ASSIGN DIGIT .

    $default  reduce using rule 45 (var)


State 120

   46 var: ALPHA ARRAY DIGIT ASSIGN STRING_VALUE .

    $default  reduce using rule 46 (var)


State 121

   30 var: INT ALPHA ASSIGN DIGIT operation .

    $default  reduce using rule 30 (var)


State 122

   31 var: INT ALPHA ASSIGN ALPHA operation .

    $default  reduce using rule 31 (var)


State 123

   33 var: INT ALPHA ARRAY DIGIT ASSIGN . digit_array

    DIGIT  shift, and go to state 135

    digit_array  go to state 136


State 124

   34 var: STRING ALPHA ARRAY DIGIT ASSIGN . alpha_array

    STRING_VALUE  shift, and go to state 137

    alpha_array  go to state 138


State 125

   57 rule: OPEN_P rule operator rule . CLOSE_P

    CLOSE_P  shift, and go to state 139


State 126

   21 program: OPEN_P rule operator rule CLOSE_P . CONDITIONAL arrow EXEC program END_EXEC program
   22        | OPEN_P rule operator rule CLOSE_P . CONDITIONAL IF EXEC program END_EXEC ELSE EXEC program END_EXEC program

    CONDITIONAL  shift, and go to state 140


State 127

   24 get: STDIN OPEN_P ALPHA COMMA DIGIT . CLOSE_P END

    CLOSE_P  shift, and go to state 141


State 128

   29 out: ESCAPE ALPHA ESCAPE out .

    $default  reduce using rule 29 (out)


State 129

   26 out: ESCAPE SPACE_ALPHA ESCAPE out .

    $default  reduce using rule 26 (out)


State 130

    8 params: type ALPHA COMMA params .

    $default  reduce using rule 8 (params)


State 131

    3 function: INT FUNCTION ALPHA OPEN_P params CLOSE_P EXEC program . END_EXEC

    END_EXEC  shift, and go to state 142


State 132

    4 function: STRING FUNCTION ALPHA OPEN_P params CLOSE_P EXEC program . END_EXEC

    END_EXEC  shift, and go to state 143


State 133

   47 operation: op DIGIT operation .

    $default  reduce using rule 47 (operation)


State 134

   48 operation: op ALPHA operation .

    $default  reduce using rule 48 (operation)


State 135

   55 digit_array: DIGIT . COMMA digit_array
   56            | DIGIT .

    COMMA  shift, and go to state 144

    $default  reduce using rule 56 (digit_array)


State 136

   33 var: INT ALPHA ARRAY DIGIT ASSIGN digit_array .

    $default  reduce using rule 33 (var)


State 137

   53 alpha_array: STRING_VALUE . COMMA alpha_array
   54            | STRING_VALUE .

    COMMA  shift, and go to state 145

    $default  reduce using rule 54 (alpha_array)


State 138

   34 var: STRING ALPHA ARRAY DIGIT ASSIGN alpha_array .

    $default  reduce using rule 34 (var)


State 139

   57 rule: OPEN_P rule operator rule CLOSE_P .

    $default  reduce using rule 57 (rule)


State 140

   21 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL . arrow EXEC program END_EXEC program
   22        | OPEN_P rule operator rule CLOSE_P CONDITIONAL . IF EXEC program END_EXEC ELSE EXEC program END_EXEC program

    IF     shift, and go to state 146
    WHILE  shift, and go to state 147

    arrow  go to state 148


State 141

   24 get: STDIN OPEN_P ALPHA COMMA DIGIT CLOSE_P . END

    END  shift, and go to state 149


State 142

    3 function: INT FUNCTION ALPHA OPEN_P params CLOSE_P EXEC program END_EXEC .

    $default  reduce using rule 3 (function)


State 143

    4 function: STRING FUNCTION ALPHA OPEN_P params CLOSE_P EXEC program END_EXEC .

    $default  reduce using rule 4 (function)


State 144

   55 digit_array: DIGIT COMMA . digit_array

    DIGIT  shift, and go to state 135

    digit_array  go to state 150


State 145

   53 alpha_array: STRING_VALUE COMMA . alpha_array

    STRING_VALUE  shift, and go to state 137

    alpha_array  go to state 151


State 146

   22 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL IF . EXEC program END_EXEC ELSE EXEC program END_EXEC program
   60 arrow: IF .

    EXEC  shift, and go to state 152

    EXEC  [reduce using rule 60 (arrow)]


State 147

   59 arrow: WHILE .

    $default  reduce using rule 59 (arrow)


State 148

   21 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL arrow . EXEC program END_EXEC program

    EXEC  shift, and go to state 153


State 149

   24 get: STDIN OPEN_P ALPHA COMMA DIGIT CLOSE_P END .

    $default  reduce using rule 24 (get)


State 150

   55 digit_array: DIGIT COMMA digit_array .

    $default  reduce using rule 55 (digit_array)


State 151

   53 alpha_array: STRING_VALUE COMMA alpha_array .

    $default  reduce using rule 53 (alpha_array)


State 152

   22 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL IF EXEC . program END_EXEC ELSE EXEC program END_EXEC program

    ALPHA   shift, and go to state 13
    INT     shift, and go to state 14
    STRING  shift, and go to state 15
    OPEN_P  shift, and go to state 16
    RETURN  shift, and go to state 17
    STDIN   shift, and go to state 18
    STDOUT  shift, and go to state 19

    ALPHA     [reduce using rule 23 (get)]
    INT       [reduce using rule 23 (get)]
    STRING    [reduce using rule 23 (get)]
    OPEN_P    [reduce using rule 23 (get)]
    END_EXEC  reduce using rule 20 (program)
    END_EXEC  [reduce using rule 23 (get)]
    RETURN    [reduce using rule 23 (get)]
    STDIN     [reduce using rule 23 (get)]
    STDOUT    [reduce using rule 23 (get)]
    $default  reduce using rule 20 (program)

    call     go to state 20
    program  go to state 154
    get      go to state 22
    var      go to state 23


State 153

   21 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL arrow EXEC . program END_EXEC program

    ALPHA   shift, and go to state 13
    INT     shift, and go to state 14
    STRING  shift, and go to state 15
    OPEN_P  shift, and go to state 16
    RETURN  shift, and go to state 17
    STDIN   shift, and go to state 18
    STDOUT  shift, and go to state 19

    ALPHA     [reduce using rule 23 (get)]
    INT       [reduce using rule 23 (get)]
    STRING    [reduce using rule 23 (get)]
    OPEN_P    [reduce using rule 23 (get)]
    END_EXEC  reduce using rule 20 (program)
    END_EXEC  [reduce using rule 23 (get)]
    RETURN    [reduce using rule 23 (get)]
    STDIN     [reduce using rule 23 (get)]
    STDOUT    [reduce using rule 23 (get)]
    $default  reduce using rule 20 (program)

    call     go to state 20
    program  go to state 155
    get      go to state 22
    var      go to state 23


State 154

   22 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL IF EXEC program . END_EXEC ELSE EXEC program END_EXEC program

    END_EXEC  shift, and go to state 156


State 155

   21 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL arrow EXEC program . END_EXEC program

    END_EXEC  shift, and go to state 157


State 156

   22 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL IF EXEC program END_EXEC . ELSE EXEC program END_EXEC program

    ELSE  shift, and go to state 158


State 157

   21 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL arrow EXEC program END_EXEC . program

    ALPHA   shift, and go to state 13
    INT     shift, and go to state 14
    STRING  shift, and go to state 15
    OPEN_P  shift, and go to state 16
    RETURN  shift, and go to state 17
    STDIN   shift, and go to state 18
    STDOUT  shift, and go to state 19

    ALPHA     [reduce using rule 23 (get)]
    INT       [reduce using rule 23 (get)]
    STRING    [reduce using rule 23 (get)]
    OPEN_P    [reduce using rule 23 (get)]
    END_EXEC  reduce using rule 20 (program)
    END_EXEC  [reduce using rule 23 (get)]
    RETURN    [reduce using rule 23 (get)]
    STDIN     [reduce using rule 23 (get)]
    STDOUT    [reduce using rule 23 (get)]
    $default  reduce using rule 20 (program)

    call     go to state 20
    program  go to state 159
    get      go to state 22
    var      go to state 23


State 158

   22 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL IF EXEC program END_EXEC ELSE . EXEC program END_EXEC program

    EXEC  shift, and go to state 160


State 159

   21 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL arrow EXEC program END_EXEC program .

    $default  reduce using rule 21 (program)


State 160

   22 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL IF EXEC program END_EXEC ELSE EXEC . program END_EXEC program

    ALPHA   shift, and go to state 13
    INT     shift, and go to state 14
    STRING  shift, and go to state 15
    OPEN_P  shift, and go to state 16
    RETURN  shift, and go to state 17
    STDIN   shift, and go to state 18
    STDOUT  shift, and go to state 19

    ALPHA     [reduce using rule 23 (get)]
    INT       [reduce using rule 23 (get)]
    STRING    [reduce using rule 23 (get)]
    OPEN_P    [reduce using rule 23 (get)]
    END_EXEC  reduce using rule 20 (program)
    END_EXEC  [reduce using rule 23 (get)]
    RETURN    [reduce using rule 23 (get)]
    STDIN     [reduce using rule 23 (get)]
    STDOUT    [reduce using rule 23 (get)]
    $default  reduce using rule 20 (program)

    call     go to state 20
    program  go to state 161
    get      go to state 22
    var      go to state 23


State 161

   22 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL IF EXEC program END_EXEC ELSE EXEC program . END_EXEC program

    END_EXEC  shift, and go to state 162


State 162

   22 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL IF EXEC program END_EXEC ELSE EXEC program END_EXEC . program

    ALPHA   shift, and go to state 13
    INT     shift, and go to state 14
    STRING  shift, and go to state 15
    OPEN_P  shift, and go to state 16
    RETURN  shift, and go to state 17
    STDIN   shift, and go to state 18
    STDOUT  shift, and go to state 19

    ALPHA     [reduce using rule 23 (get)]
    INT       [reduce using rule 23 (get)]
    STRING    [reduce using rule 23 (get)]
    OPEN_P    [reduce using rule 23 (get)]
    END_EXEC  reduce using rule 20 (program)
    END_EXEC  [reduce using rule 23 (get)]
    RETURN    [reduce using rule 23 (get)]
    STDIN     [reduce using rule 23 (get)]
    STDOUT    [reduce using rule 23 (get)]
    $default  reduce using rule 20 (program)

    call     go to state 20
    program  go to state 163
    get      go to state 22
    var      go to state 23


State 163

   22 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL IF EXEC program END_EXEC ELSE EXEC program END_EXEC program .

    $default  reduce using rule 22 (program)
