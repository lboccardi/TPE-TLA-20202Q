Terminals unused in grammar

    ELSE


Rules useless in parser due to conflicts

   22 get: %empty


State 8 conflicts: 7 shift/reduce, 1 reduce/reduce
State 22 conflicts: 7 shift/reduce, 1 reduce/reduce
State 43 conflicts: 7 shift/reduce, 1 reduce/reduce
State 46 conflicts: 7 shift/reduce, 1 reduce/reduce
State 56 conflicts: 1 reduce/reduce
State 57 conflicts: 1 reduce/reduce
State 87 conflicts: 7 shift/reduce, 1 reduce/reduce
State 112 conflicts: 7 shift/reduce, 1 reduce/reduce
State 113 conflicts: 7 shift/reduce, 1 reduce/reduce
State 147 conflicts: 7 shift/reduce, 1 reduce/reduce
State 149 conflicts: 7 shift/reduce, 1 reduce/reduce


Grammar

    0 $accept: start $end

    1 start: MAIN EXEC program END_EXEC
    2      | function start

    3 function: INT FUNCTION ALPHA OPEN_P params CLOSE_P EXEC program END_EXEC
    4         | STRING FUNCTION ALPHA OPEN_P params CLOSE_P EXEC program END_EXEC

    5 type: INT
    6     | STRING

    7 params: type ALPHA
    8       | type ALPHA COMMA params
    9       | %empty

   10 args: assignment
   11     | assignment COMMA args
   12     | call
   13     | %empty

   14 call: ALPHA OPEN_P args CLOSE_P

   15 program: var END program
   16        | call END program
   17        | OPEN_P rule operator rule CLOSE_P CONDITIONAL arrow EXEC program END_EXEC program
   18        | RETURN assignment END
   19        | get program
   20        | STDOUT out END program
   21        | %empty

   22 get: %empty
   23    | STDIN OPEN_P ALPHA COMMA DIGIT CLOSE_P END

   24 out: SPACE_ALPHA out
   25    | ESCAPE SPACE_ALPHA ESCAPE out
   26    | %empty
   27    | ALPHA out
   28    | ESCAPE ALPHA ESCAPE out

   29 var: INT ALPHA ASSIGN DIGIT operation
   30    | STRING ALPHA ASSIGN STRING_VALUE
   31    | INT ALPHA ARRAY DIGIT ASSIGN digit_array
   32    | STRING ALPHA ARRAY DIGIT ASSIGN alpha_array
   33    | INT ALPHA
   34    | STRING ALPHA
   35    | INT ALPHA ARRAY DIGIT
   36    | STRING ALPHA ARRAY DIGIT
   37    | ALPHA ASSIGN DIGIT
   38    | ALPHA ASSIGN STRING_VALUE
   39    | ALPHA ASSIGN assignment operation
   40    | INT ALPHA ASSIGN call
   41    | STRING ALPHA ASSIGN call
   42    | ALPHA ASSIGN call
   43    | ALPHA ARRAY DIGIT ASSIGN DIGIT
   44    | ALPHA ARRAY DIGIT ASSIGN STRING_VALUE

   45 operation: op DIGIT operation
   46          | %empty

   47 assignment: ALPHA
   48           | DIGIT
   49           | STRING_VALUE

   50 alpha_array: STRING_VALUE COMMA alpha_array
   51            | STRING_VALUE

   52 digit_array: DIGIT COMMA digit_array
   53            | DIGIT

   54 rule: OPEN_P rule operator rule CLOSE_P
   55     | assignment

   56 arrow: WHILE
   57      | IF

   58 operator: op
   59         | L
   60         | G
   61         | LE
   62         | GE
   63         | EQ
   64         | NE
   65         | NOT
   66         | OR
   67         | AND

   68 op: PLUS
   69   | MINUS
   70   | DIV
   71   | TIMES


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    DIGIT <stringValue> (258) 23 29 31 32 35 36 37 43 44 45 48 52 53
    ALPHA <stringValue> (259) 3 4 7 8 14 23 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 47
    SPACE_ALPHA <stringValue> (260) 24 25
    STRING_VALUE <stringValue> (261) 30 38 44 49 50 51
    INT <stringValue> (262) 3 5 29 31 33 35 40
    STRING <stringValue> (263) 4 6 30 32 34 36 41
    PLUS <stringValue> (264) 68
    MINUS <stringValue> (265) 69
    TIMES <stringValue> (266) 71
    DIV <stringValue> (267) 70
    END (268) 15 16 18 20 23
    OPEN_P (269) 3 4 14 17 23 54
    CLOSE_P (270) 3 4 14 17 23 54
    CONDITIONAL (271) 17
    EXEC (272) 1 3 4 17
    END_EXEC (273) 1 3 4 17
    IF (274) 57
    ELSE (275)
    ESCAPE (276) 25 28
    WHILE (277) 56
    L (278) 59
    G (279) 60
    LE (280) 61
    GE (281) 62
    EQ (282) 63
    NE (283) 64
    NOT (284) 65
    OR (285) 66
    AND (286) 67
    ASSIGN (287) 29 30 31 32 37 38 39 40 41 42 43 44
    RETURN (288) 18
    MAIN (289) 1
    STDIN (290) 23
    STDOUT (291) 20
    FUNCTION (292) 3 4
    COMMA (293) 8 11 23 50 52
    ARRAY (294) 31 32 35 36 43 44


Nonterminals, with rules where they appear

    $accept (40)
        on left: 0
    start <stringValue> (41)
        on left: 1 2
        on right: 0 2
    function <stringValue> (42)
        on left: 3 4
        on right: 2
    type <stringValue> (43)
        on left: 5 6
        on right: 7 8
    params <stringValue> (44)
        on left: 7 8 9
        on right: 3 4 8
    args <stringValue> (45)
        on left: 10 11 12 13
        on right: 11 14
    call <stringValue> (46)
        on left: 14
        on right: 12 16 40 41 42
    program <stringValue> (47)
        on left: 15 16 17 18 19 20 21
        on right: 1 3 4 15 16 17 19 20
    get <stringValue> (48)
        on left: 22 23
        on right: 19
    out <stringValue> (49)
        on left: 24 25 26 27 28
        on right: 20 24 25 27 28
    var <stringValue> (50)
        on left: 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44
        on right: 15
    operation <stringValue> (51)
        on left: 45 46
        on right: 29 39 45
    assignment <stringValue> (52)
        on left: 47 48 49
        on right: 10 11 18 39 55
    alpha_array <stringValue> (53)
        on left: 50 51
        on right: 32 50
    digit_array <stringValue> (54)
        on left: 52 53
        on right: 31 52
    rule <stringValue> (55)
        on left: 54 55
        on right: 17 54
    arrow <stringValue> (56)
        on left: 56 57
        on right: 17
    operator <stringValue> (57)
        on left: 58 59 60 61 62 63 64 65 66 67
        on right: 17 54
    op <stringValue> (58)
        on left: 68 69 70 71
        on right: 45 58


State 0

    0 $accept: . start $end

    INT     shift, and go to state 1
    STRING  shift, and go to state 2
    MAIN    shift, and go to state 3

    start     go to state 4
    function  go to state 5


State 1

    3 function: INT . FUNCTION ALPHA OPEN_P params CLOSE_P EXEC program END_EXEC

    FUNCTION  shift, and go to state 6


State 2

    4 function: STRING . FUNCTION ALPHA OPEN_P params CLOSE_P EXEC program END_EXEC

    FUNCTION  shift, and go to state 7


State 3

    1 start: MAIN . EXEC program END_EXEC

    EXEC  shift, and go to state 8


State 4

    0 $accept: start . $end

    $end  shift, and go to state 9


State 5

    2 start: function . start

    INT     shift, and go to state 1
    STRING  shift, and go to state 2
    MAIN    shift, and go to state 3

    start     go to state 10
    function  go to state 5


State 6

    3 function: INT FUNCTION . ALPHA OPEN_P params CLOSE_P EXEC program END_EXEC

    ALPHA  shift, and go to state 11


State 7

    4 function: STRING FUNCTION . ALPHA OPEN_P params CLOSE_P EXEC program END_EXEC

    ALPHA  shift, and go to state 12


State 8

    1 start: MAIN EXEC . program END_EXEC

    ALPHA   shift, and go to state 13
    INT     shift, and go to state 14
    STRING  shift, and go to state 15
    OPEN_P  shift, and go to state 16
    RETURN  shift, and go to state 17
    STDIN   shift, and go to state 18
    STDOUT  shift, and go to state 19

    ALPHA     [reduce using rule 22 (get)]
    INT       [reduce using rule 22 (get)]
    STRING    [reduce using rule 22 (get)]
    OPEN_P    [reduce using rule 22 (get)]
    END_EXEC  reduce using rule 21 (program)
    END_EXEC  [reduce using rule 22 (get)]
    RETURN    [reduce using rule 22 (get)]
    STDIN     [reduce using rule 22 (get)]
    STDOUT    [reduce using rule 22 (get)]
    $default  reduce using rule 21 (program)

    call     go to state 20
    program  go to state 21
    get      go to state 22
    var      go to state 23


State 9

    0 $accept: start $end .

    $default  accept


State 10

    2 start: function start .

    $default  reduce using rule 2 (start)


State 11

    3 function: INT FUNCTION ALPHA . OPEN_P params CLOSE_P EXEC program END_EXEC

    OPEN_P  shift, and go to state 24


State 12

    4 function: STRING FUNCTION ALPHA . OPEN_P params CLOSE_P EXEC program END_EXEC

    OPEN_P  shift, and go to state 25


State 13

   14 call: ALPHA . OPEN_P args CLOSE_P
   37 var: ALPHA . ASSIGN DIGIT
   38    | ALPHA . ASSIGN STRING_VALUE
   39    | ALPHA . ASSIGN assignment operation
   42    | ALPHA . ASSIGN call
   43    | ALPHA . ARRAY DIGIT ASSIGN DIGIT
   44    | ALPHA . ARRAY DIGIT ASSIGN STRING_VALUE

    OPEN_P  shift, and go to state 26
    ASSIGN  shift, and go to state 27
    ARRAY   shift, and go to state 28


State 14

   29 var: INT . ALPHA ASSIGN DIGIT operation
   31    | INT . ALPHA ARRAY DIGIT ASSIGN digit_array
   33    | INT . ALPHA
   35    | INT . ALPHA ARRAY DIGIT
   40    | INT . ALPHA ASSIGN call

    ALPHA  shift, and go to state 29


State 15

   30 var: STRING . ALPHA ASSIGN STRING_VALUE
   32    | STRING . ALPHA ARRAY DIGIT ASSIGN alpha_array
   34    | STRING . ALPHA
   36    | STRING . ALPHA ARRAY DIGIT
   41    | STRING . ALPHA ASSIGN call

    ALPHA  shift, and go to state 30


State 16

   17 program: OPEN_P . rule operator rule CLOSE_P CONDITIONAL arrow EXEC program END_EXEC program

    DIGIT         shift, and go to state 31
    ALPHA         shift, and go to state 32
    STRING_VALUE  shift, and go to state 33
    OPEN_P        shift, and go to state 34

    assignment  go to state 35
    rule        go to state 36


State 17

   18 program: RETURN . assignment END

    DIGIT         shift, and go to state 31
    ALPHA         shift, and go to state 32
    STRING_VALUE  shift, and go to state 33

    assignment  go to state 37


State 18

   23 get: STDIN . OPEN_P ALPHA COMMA DIGIT CLOSE_P END

    OPEN_P  shift, and go to state 38


State 19

   20 program: STDOUT . out END program

    ALPHA        shift, and go to state 39
    SPACE_ALPHA  shift, and go to state 40
    ESCAPE       shift, and go to state 41

    $default  reduce using rule 26 (out)

    out  go to state 42


State 20

   16 program: call . END program

    END  shift, and go to state 43


State 21

    1 start: MAIN EXEC program . END_EXEC

    END_EXEC  shift, and go to state 44


State 22

   19 program: get . program

    ALPHA   shift, and go to state 13
    INT     shift, and go to state 14
    STRING  shift, and go to state 15
    OPEN_P  shift, and go to state 16
    RETURN  shift, and go to state 17
    STDIN   shift, and go to state 18
    STDOUT  shift, and go to state 19

    ALPHA     [reduce using rule 22 (get)]
    INT       [reduce using rule 22 (get)]
    STRING    [reduce using rule 22 (get)]
    OPEN_P    [reduce using rule 22 (get)]
    END_EXEC  reduce using rule 21 (program)
    END_EXEC  [reduce using rule 22 (get)]
    RETURN    [reduce using rule 22 (get)]
    STDIN     [reduce using rule 22 (get)]
    STDOUT    [reduce using rule 22 (get)]
    $default  reduce using rule 21 (program)

    call     go to state 20
    program  go to state 45
    get      go to state 22
    var      go to state 23


State 23

   15 program: var . END program

    END  shift, and go to state 46


State 24

    3 function: INT FUNCTION ALPHA OPEN_P . params CLOSE_P EXEC program END_EXEC

    INT     shift, and go to state 47
    STRING  shift, and go to state 48

    $default  reduce using rule 9 (params)

    type    go to state 49
    params  go to state 50


State 25

    4 function: STRING FUNCTION ALPHA OPEN_P . params CLOSE_P EXEC program END_EXEC

    INT     shift, and go to state 47
    STRING  shift, and go to state 48

    $default  reduce using rule 9 (params)

    type    go to state 49
    params  go to state 51


State 26

   14 call: ALPHA OPEN_P . args CLOSE_P

    DIGIT         shift, and go to state 31
    ALPHA         shift, and go to state 52
    STRING_VALUE  shift, and go to state 33

    $default  reduce using rule 13 (args)

    args        go to state 53
    call        go to state 54
    assignment  go to state 55


State 27

   37 var: ALPHA ASSIGN . DIGIT
   38    | ALPHA ASSIGN . STRING_VALUE
   39    | ALPHA ASSIGN . assignment operation
   42    | ALPHA ASSIGN . call

    DIGIT         shift, and go to state 56
    ALPHA         shift, and go to state 52
    STRING_VALUE  shift, and go to state 57

    call        go to state 58
    assignment  go to state 59


State 28

   43 var: ALPHA ARRAY . DIGIT ASSIGN DIGIT
   44    | ALPHA ARRAY . DIGIT ASSIGN STRING_VALUE

    DIGIT  shift, and go to state 60


State 29

   29 var: INT ALPHA . ASSIGN DIGIT operation
   31    | INT ALPHA . ARRAY DIGIT ASSIGN digit_array
   33    | INT ALPHA .
   35    | INT ALPHA . ARRAY DIGIT
   40    | INT ALPHA . ASSIGN call

    ASSIGN  shift, and go to state 61
    ARRAY   shift, and go to state 62

    $default  reduce using rule 33 (var)


State 30

   30 var: STRING ALPHA . ASSIGN STRING_VALUE
   32    | STRING ALPHA . ARRAY DIGIT ASSIGN alpha_array
   34    | STRING ALPHA .
   36    | STRING ALPHA . ARRAY DIGIT
   41    | STRING ALPHA . ASSIGN call

    ASSIGN  shift, and go to state 63
    ARRAY   shift, and go to state 64

    $default  reduce using rule 34 (var)


State 31

   48 assignment: DIGIT .

    $default  reduce using rule 48 (assignment)


State 32

   47 assignment: ALPHA .

    $default  reduce using rule 47 (assignment)


State 33

   49 assignment: STRING_VALUE .

    $default  reduce using rule 49 (assignment)


State 34

   54 rule: OPEN_P . rule operator rule CLOSE_P

    DIGIT         shift, and go to state 31
    ALPHA         shift, and go to state 32
    STRING_VALUE  shift, and go to state 33
    OPEN_P        shift, and go to state 34

    assignment  go to state 35
    rule        go to state 65


State 35

   55 rule: assignment .

    $default  reduce using rule 55 (rule)


State 36

   17 program: OPEN_P rule . operator rule CLOSE_P CONDITIONAL arrow EXEC program END_EXEC program

    PLUS   shift, and go to state 66
    MINUS  shift, and go to state 67
    TIMES  shift, and go to state 68
    DIV    shift, and go to state 69
    L      shift, and go to state 70
    G      shift, and go to state 71
    LE     shift, and go to state 72
    GE     shift, and go to state 73
    EQ     shift, and go to state 74
    NE     shift, and go to state 75
    NOT    shift, and go to state 76
    OR     shift, and go to state 77
    AND    shift, and go to state 78

    operator  go to state 79
    op        go to state 80


State 37

   18 program: RETURN assignment . END

    END  shift, and go to state 81


State 38

   23 get: STDIN OPEN_P . ALPHA COMMA DIGIT CLOSE_P END

    ALPHA  shift, and go to state 82


State 39

   27 out: ALPHA . out

    ALPHA        shift, and go to state 39
    SPACE_ALPHA  shift, and go to state 40
    ESCAPE       shift, and go to state 41

    $default  reduce using rule 26 (out)

    out  go to state 83


State 40

   24 out: SPACE_ALPHA . out

    ALPHA        shift, and go to state 39
    SPACE_ALPHA  shift, and go to state 40
    ESCAPE       shift, and go to state 41

    $default  reduce using rule 26 (out)

    out  go to state 84


State 41

   25 out: ESCAPE . SPACE_ALPHA ESCAPE out
   28    | ESCAPE . ALPHA ESCAPE out

    ALPHA        shift, and go to state 85
    SPACE_ALPHA  shift, and go to state 86


State 42

   20 program: STDOUT out . END program

    END  shift, and go to state 87


State 43

   16 program: call END . program

    ALPHA   shift, and go to state 13
    INT     shift, and go to state 14
    STRING  shift, and go to state 15
    OPEN_P  shift, and go to state 16
    RETURN  shift, and go to state 17
    STDIN   shift, and go to state 18
    STDOUT  shift, and go to state 19

    ALPHA     [reduce using rule 22 (get)]
    INT       [reduce using rule 22 (get)]
    STRING    [reduce using rule 22 (get)]
    OPEN_P    [reduce using rule 22 (get)]
    END_EXEC  reduce using rule 21 (program)
    END_EXEC  [reduce using rule 22 (get)]
    RETURN    [reduce using rule 22 (get)]
    STDIN     [reduce using rule 22 (get)]
    STDOUT    [reduce using rule 22 (get)]
    $default  reduce using rule 21 (program)

    call     go to state 20
    program  go to state 88
    get      go to state 22
    var      go to state 23


State 44

    1 start: MAIN EXEC program END_EXEC .

    $default  reduce using rule 1 (start)


State 45

   19 program: get program .

    $default  reduce using rule 19 (program)


State 46

   15 program: var END . program

    ALPHA   shift, and go to state 13
    INT     shift, and go to state 14
    STRING  shift, and go to state 15
    OPEN_P  shift, and go to state 16
    RETURN  shift, and go to state 17
    STDIN   shift, and go to state 18
    STDOUT  shift, and go to state 19

    ALPHA     [reduce using rule 22 (get)]
    INT       [reduce using rule 22 (get)]
    STRING    [reduce using rule 22 (get)]
    OPEN_P    [reduce using rule 22 (get)]
    END_EXEC  reduce using rule 21 (program)
    END_EXEC  [reduce using rule 22 (get)]
    RETURN    [reduce using rule 22 (get)]
    STDIN     [reduce using rule 22 (get)]
    STDOUT    [reduce using rule 22 (get)]
    $default  reduce using rule 21 (program)

    call     go to state 20
    program  go to state 89
    get      go to state 22
    var      go to state 23


State 47

    5 type: INT .

    $default  reduce using rule 5 (type)


State 48

    6 type: STRING .

    $default  reduce using rule 6 (type)


State 49

    7 params: type . ALPHA
    8       | type . ALPHA COMMA params

    ALPHA  shift, and go to state 90


State 50

    3 function: INT FUNCTION ALPHA OPEN_P params . CLOSE_P EXEC program END_EXEC

    CLOSE_P  shift, and go to state 91


State 51

    4 function: STRING FUNCTION ALPHA OPEN_P params . CLOSE_P EXEC program END_EXEC

    CLOSE_P  shift, and go to state 92


State 52

   14 call: ALPHA . OPEN_P args CLOSE_P
   47 assignment: ALPHA .

    OPEN_P  shift, and go to state 26

    $default  reduce using rule 47 (assignment)


State 53

   14 call: ALPHA OPEN_P args . CLOSE_P

    CLOSE_P  shift, and go to state 93


State 54

   12 args: call .

    $default  reduce using rule 12 (args)


State 55

   10 args: assignment .
   11     | assignment . COMMA args

    COMMA  shift, and go to state 94

    $default  reduce using rule 10 (args)


State 56

   37 var: ALPHA ASSIGN DIGIT .
   48 assignment: DIGIT .

    END       reduce using rule 37 (var)
    END       [reduce using rule 48 (assignment)]
    $default  reduce using rule 48 (assignment)


State 57

   38 var: ALPHA ASSIGN STRING_VALUE .
   49 assignment: STRING_VALUE .

    END       reduce using rule 38 (var)
    END       [reduce using rule 49 (assignment)]
    $default  reduce using rule 49 (assignment)


State 58

   42 var: ALPHA ASSIGN call .

    $default  reduce using rule 42 (var)


State 59

   39 var: ALPHA ASSIGN assignment . operation

    PLUS   shift, and go to state 66
    MINUS  shift, and go to state 67
    TIMES  shift, and go to state 68
    DIV    shift, and go to state 69

    $default  reduce using rule 46 (operation)

    operation  go to state 95
    op         go to state 96


State 60

   43 var: ALPHA ARRAY DIGIT . ASSIGN DIGIT
   44    | ALPHA ARRAY DIGIT . ASSIGN STRING_VALUE

    ASSIGN  shift, and go to state 97


State 61

   29 var: INT ALPHA ASSIGN . DIGIT operation
   40    | INT ALPHA ASSIGN . call

    DIGIT  shift, and go to state 98
    ALPHA  shift, and go to state 99

    call  go to state 100


State 62

   31 var: INT ALPHA ARRAY . DIGIT ASSIGN digit_array
   35    | INT ALPHA ARRAY . DIGIT

    DIGIT  shift, and go to state 101


State 63

   30 var: STRING ALPHA ASSIGN . STRING_VALUE
   41    | STRING ALPHA ASSIGN . call

    ALPHA         shift, and go to state 99
    STRING_VALUE  shift, and go to state 102

    call  go to state 103


State 64

   32 var: STRING ALPHA ARRAY . DIGIT ASSIGN alpha_array
   36    | STRING ALPHA ARRAY . DIGIT

    DIGIT  shift, and go to state 104


State 65

   54 rule: OPEN_P rule . operator rule CLOSE_P

    PLUS   shift, and go to state 66
    MINUS  shift, and go to state 67
    TIMES  shift, and go to state 68
    DIV    shift, and go to state 69
    L      shift, and go to state 70
    G      shift, and go to state 71
    LE     shift, and go to state 72
    GE     shift, and go to state 73
    EQ     shift, and go to state 74
    NE     shift, and go to state 75
    NOT    shift, and go to state 76
    OR     shift, and go to state 77
    AND    shift, and go to state 78

    operator  go to state 105
    op        go to state 80


State 66

   68 op: PLUS .

    $default  reduce using rule 68 (op)


State 67

   69 op: MINUS .

    $default  reduce using rule 69 (op)


State 68

   71 op: TIMES .

    $default  reduce using rule 71 (op)


State 69

   70 op: DIV .

    $default  reduce using rule 70 (op)


State 70

   59 operator: L .

    $default  reduce using rule 59 (operator)


State 71

   60 operator: G .

    $default  reduce using rule 60 (operator)


State 72

   61 operator: LE .

    $default  reduce using rule 61 (operator)


State 73

   62 operator: GE .

    $default  reduce using rule 62 (operator)


State 74

   63 operator: EQ .

    $default  reduce using rule 63 (operator)


State 75

   64 operator: NE .

    $default  reduce using rule 64 (operator)


State 76

   65 operator: NOT .

    $default  reduce using rule 65 (operator)


State 77

   66 operator: OR .

    $default  reduce using rule 66 (operator)


State 78

   67 operator: AND .

    $default  reduce using rule 67 (operator)


State 79

   17 program: OPEN_P rule operator . rule CLOSE_P CONDITIONAL arrow EXEC program END_EXEC program

    DIGIT         shift, and go to state 31
    ALPHA         shift, and go to state 32
    STRING_VALUE  shift, and go to state 33
    OPEN_P        shift, and go to state 34

    assignment  go to state 35
    rule        go to state 106


State 80

   58 operator: op .

    $default  reduce using rule 58 (operator)


State 81

   18 program: RETURN assignment END .

    $default  reduce using rule 18 (program)


State 82

   23 get: STDIN OPEN_P ALPHA . COMMA DIGIT CLOSE_P END

    COMMA  shift, and go to state 107


State 83

   27 out: ALPHA out .

    $default  reduce using rule 27 (out)


State 84

   24 out: SPACE_ALPHA out .

    $default  reduce using rule 24 (out)


State 85

   28 out: ESCAPE ALPHA . ESCAPE out

    ESCAPE  shift, and go to state 108


State 86

   25 out: ESCAPE SPACE_ALPHA . ESCAPE out

    ESCAPE  shift, and go to state 109


State 87

   20 program: STDOUT out END . program

    ALPHA   shift, and go to state 13
    INT     shift, and go to state 14
    STRING  shift, and go to state 15
    OPEN_P  shift, and go to state 16
    RETURN  shift, and go to state 17
    STDIN   shift, and go to state 18
    STDOUT  shift, and go to state 19

    ALPHA     [reduce using rule 22 (get)]
    INT       [reduce using rule 22 (get)]
    STRING    [reduce using rule 22 (get)]
    OPEN_P    [reduce using rule 22 (get)]
    END_EXEC  reduce using rule 21 (program)
    END_EXEC  [reduce using rule 22 (get)]
    RETURN    [reduce using rule 22 (get)]
    STDIN     [reduce using rule 22 (get)]
    STDOUT    [reduce using rule 22 (get)]
    $default  reduce using rule 21 (program)

    call     go to state 20
    program  go to state 110
    get      go to state 22
    var      go to state 23


State 88

   16 program: call END program .

    $default  reduce using rule 16 (program)


State 89

   15 program: var END program .

    $default  reduce using rule 15 (program)


State 90

    7 params: type ALPHA .
    8       | type ALPHA . COMMA params

    COMMA  shift, and go to state 111

    $default  reduce using rule 7 (params)


State 91

    3 function: INT FUNCTION ALPHA OPEN_P params CLOSE_P . EXEC program END_EXEC

    EXEC  shift, and go to state 112


State 92

    4 function: STRING FUNCTION ALPHA OPEN_P params CLOSE_P . EXEC program END_EXEC

    EXEC  shift, and go to state 113


State 93

   14 call: ALPHA OPEN_P args CLOSE_P .

    $default  reduce using rule 14 (call)


State 94

   11 args: assignment COMMA . args

    DIGIT         shift, and go to state 31
    ALPHA         shift, and go to state 52
    STRING_VALUE  shift, and go to state 33

    $default  reduce using rule 13 (args)

    args        go to state 114
    call        go to state 54
    assignment  go to state 55


State 95

   39 var: ALPHA ASSIGN assignment operation .

    $default  reduce using rule 39 (var)


State 96

   45 operation: op . DIGIT operation

    DIGIT  shift, and go to state 115


State 97

   43 var: ALPHA ARRAY DIGIT ASSIGN . DIGIT
   44    | ALPHA ARRAY DIGIT ASSIGN . STRING_VALUE

    DIGIT         shift, and go to state 116
    STRING_VALUE  shift, and go to state 117


State 98

   29 var: INT ALPHA ASSIGN DIGIT . operation

    PLUS   shift, and go to state 66
    MINUS  shift, and go to state 67
    TIMES  shift, and go to state 68
    DIV    shift, and go to state 69

    $default  reduce using rule 46 (operation)

    operation  go to state 118
    op         go to state 96


State 99

   14 call: ALPHA . OPEN_P args CLOSE_P

    OPEN_P  shift, and go to state 26


State 100

   40 var: INT ALPHA ASSIGN call .

    $default  reduce using rule 40 (var)


State 101

   31 var: INT ALPHA ARRAY DIGIT . ASSIGN digit_array
   35    | INT ALPHA ARRAY DIGIT .

    ASSIGN  shift, and go to state 119

    $default  reduce using rule 35 (var)


State 102

   30 var: STRING ALPHA ASSIGN STRING_VALUE .

    $default  reduce using rule 30 (var)


State 103

   41 var: STRING ALPHA ASSIGN call .

    $default  reduce using rule 41 (var)


State 104

   32 var: STRING ALPHA ARRAY DIGIT . ASSIGN alpha_array
   36    | STRING ALPHA ARRAY DIGIT .

    ASSIGN  shift, and go to state 120

    $default  reduce using rule 36 (var)


State 105

   54 rule: OPEN_P rule operator . rule CLOSE_P

    DIGIT         shift, and go to state 31
    ALPHA         shift, and go to state 32
    STRING_VALUE  shift, and go to state 33
    OPEN_P        shift, and go to state 34

    assignment  go to state 35
    rule        go to state 121


State 106

   17 program: OPEN_P rule operator rule . CLOSE_P CONDITIONAL arrow EXEC program END_EXEC program

    CLOSE_P  shift, and go to state 122


State 107

   23 get: STDIN OPEN_P ALPHA COMMA . DIGIT CLOSE_P END

    DIGIT  shift, and go to state 123


State 108

   28 out: ESCAPE ALPHA ESCAPE . out

    ALPHA        shift, and go to state 39
    SPACE_ALPHA  shift, and go to state 40
    ESCAPE       shift, and go to state 41

    $default  reduce using rule 26 (out)

    out  go to state 124


State 109

   25 out: ESCAPE SPACE_ALPHA ESCAPE . out

    ALPHA        shift, and go to state 39
    SPACE_ALPHA  shift, and go to state 40
    ESCAPE       shift, and go to state 41

    $default  reduce using rule 26 (out)

    out  go to state 125


State 110

   20 program: STDOUT out END program .

    $default  reduce using rule 20 (program)


State 111

    8 params: type ALPHA COMMA . params

    INT     shift, and go to state 47
    STRING  shift, and go to state 48

    $default  reduce using rule 9 (params)

    type    go to state 49
    params  go to state 126


State 112

    3 function: INT FUNCTION ALPHA OPEN_P params CLOSE_P EXEC . program END_EXEC

    ALPHA   shift, and go to state 13
    INT     shift, and go to state 14
    STRING  shift, and go to state 15
    OPEN_P  shift, and go to state 16
    RETURN  shift, and go to state 17
    STDIN   shift, and go to state 18
    STDOUT  shift, and go to state 19

    ALPHA     [reduce using rule 22 (get)]
    INT       [reduce using rule 22 (get)]
    STRING    [reduce using rule 22 (get)]
    OPEN_P    [reduce using rule 22 (get)]
    END_EXEC  reduce using rule 21 (program)
    END_EXEC  [reduce using rule 22 (get)]
    RETURN    [reduce using rule 22 (get)]
    STDIN     [reduce using rule 22 (get)]
    STDOUT    [reduce using rule 22 (get)]
    $default  reduce using rule 21 (program)

    call     go to state 20
    program  go to state 127
    get      go to state 22
    var      go to state 23


State 113

    4 function: STRING FUNCTION ALPHA OPEN_P params CLOSE_P EXEC . program END_EXEC

    ALPHA   shift, and go to state 13
    INT     shift, and go to state 14
    STRING  shift, and go to state 15
    OPEN_P  shift, and go to state 16
    RETURN  shift, and go to state 17
    STDIN   shift, and go to state 18
    STDOUT  shift, and go to state 19

    ALPHA     [reduce using rule 22 (get)]
    INT       [reduce using rule 22 (get)]
    STRING    [reduce using rule 22 (get)]
    OPEN_P    [reduce using rule 22 (get)]
    END_EXEC  reduce using rule 21 (program)
    END_EXEC  [reduce using rule 22 (get)]
    RETURN    [reduce using rule 22 (get)]
    STDIN     [reduce using rule 22 (get)]
    STDOUT    [reduce using rule 22 (get)]
    $default  reduce using rule 21 (program)

    call     go to state 20
    program  go to state 128
    get      go to state 22
    var      go to state 23


State 114

   11 args: assignment COMMA args .

    $default  reduce using rule 11 (args)


State 115

   45 operation: op DIGIT . operation

    PLUS   shift, and go to state 66
    MINUS  shift, and go to state 67
    TIMES  shift, and go to state 68
    DIV    shift, and go to state 69

    $default  reduce using rule 46 (operation)

    operation  go to state 129
    op         go to state 96


State 116

   43 var: ALPHA ARRAY DIGIT ASSIGN DIGIT .

    $default  reduce using rule 43 (var)


State 117

   44 var: ALPHA ARRAY DIGIT ASSIGN STRING_VALUE .

    $default  reduce using rule 44 (var)


State 118

   29 var: INT ALPHA ASSIGN DIGIT operation .

    $default  reduce using rule 29 (var)


State 119

   31 var: INT ALPHA ARRAY DIGIT ASSIGN . digit_array

    DIGIT  shift, and go to state 130

    digit_array  go to state 131


State 120

   32 var: STRING ALPHA ARRAY DIGIT ASSIGN . alpha_array

    STRING_VALUE  shift, and go to state 132

    alpha_array  go to state 133


State 121

   54 rule: OPEN_P rule operator rule . CLOSE_P

    CLOSE_P  shift, and go to state 134


State 122

   17 program: OPEN_P rule operator rule CLOSE_P . CONDITIONAL arrow EXEC program END_EXEC program

    CONDITIONAL  shift, and go to state 135


State 123

   23 get: STDIN OPEN_P ALPHA COMMA DIGIT . CLOSE_P END

    CLOSE_P  shift, and go to state 136


State 124

   28 out: ESCAPE ALPHA ESCAPE out .

    $default  reduce using rule 28 (out)


State 125

   25 out: ESCAPE SPACE_ALPHA ESCAPE out .

    $default  reduce using rule 25 (out)


State 126

    8 params: type ALPHA COMMA params .

    $default  reduce using rule 8 (params)


State 127

    3 function: INT FUNCTION ALPHA OPEN_P params CLOSE_P EXEC program . END_EXEC

    END_EXEC  shift, and go to state 137


State 128

    4 function: STRING FUNCTION ALPHA OPEN_P params CLOSE_P EXEC program . END_EXEC

    END_EXEC  shift, and go to state 138


State 129

   45 operation: op DIGIT operation .

    $default  reduce using rule 45 (operation)


State 130

   52 digit_array: DIGIT . COMMA digit_array
   53            | DIGIT .

    COMMA  shift, and go to state 139

    $default  reduce using rule 53 (digit_array)


State 131

   31 var: INT ALPHA ARRAY DIGIT ASSIGN digit_array .

    $default  reduce using rule 31 (var)


State 132

   50 alpha_array: STRING_VALUE . COMMA alpha_array
   51            | STRING_VALUE .

    COMMA  shift, and go to state 140

    $default  reduce using rule 51 (alpha_array)


State 133

   32 var: STRING ALPHA ARRAY DIGIT ASSIGN alpha_array .

    $default  reduce using rule 32 (var)


State 134

   54 rule: OPEN_P rule operator rule CLOSE_P .

    $default  reduce using rule 54 (rule)


State 135

   17 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL . arrow EXEC program END_EXEC program

    IF     shift, and go to state 141
    WHILE  shift, and go to state 142

    arrow  go to state 143


State 136

   23 get: STDIN OPEN_P ALPHA COMMA DIGIT CLOSE_P . END

    END  shift, and go to state 144


State 137

    3 function: INT FUNCTION ALPHA OPEN_P params CLOSE_P EXEC program END_EXEC .

    $default  reduce using rule 3 (function)


State 138

    4 function: STRING FUNCTION ALPHA OPEN_P params CLOSE_P EXEC program END_EXEC .

    $default  reduce using rule 4 (function)


State 139

   52 digit_array: DIGIT COMMA . digit_array

    DIGIT  shift, and go to state 130

    digit_array  go to state 145


State 140

   50 alpha_array: STRING_VALUE COMMA . alpha_array

    STRING_VALUE  shift, and go to state 132

    alpha_array  go to state 146


State 141

   57 arrow: IF .

    $default  reduce using rule 57 (arrow)


State 142

   56 arrow: WHILE .

    $default  reduce using rule 56 (arrow)


State 143

   17 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL arrow . EXEC program END_EXEC program

    EXEC  shift, and go to state 147


State 144

   23 get: STDIN OPEN_P ALPHA COMMA DIGIT CLOSE_P END .

    $default  reduce using rule 23 (get)


State 145

   52 digit_array: DIGIT COMMA digit_array .

    $default  reduce using rule 52 (digit_array)


State 146

   50 alpha_array: STRING_VALUE COMMA alpha_array .

    $default  reduce using rule 50 (alpha_array)


State 147

   17 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL arrow EXEC . program END_EXEC program

    ALPHA   shift, and go to state 13
    INT     shift, and go to state 14
    STRING  shift, and go to state 15
    OPEN_P  shift, and go to state 16
    RETURN  shift, and go to state 17
    STDIN   shift, and go to state 18
    STDOUT  shift, and go to state 19

    ALPHA     [reduce using rule 22 (get)]
    INT       [reduce using rule 22 (get)]
    STRING    [reduce using rule 22 (get)]
    OPEN_P    [reduce using rule 22 (get)]
    END_EXEC  reduce using rule 21 (program)
    END_EXEC  [reduce using rule 22 (get)]
    RETURN    [reduce using rule 22 (get)]
    STDIN     [reduce using rule 22 (get)]
    STDOUT    [reduce using rule 22 (get)]
    $default  reduce using rule 21 (program)

    call     go to state 20
    program  go to state 148
    get      go to state 22
    var      go to state 23


State 148

   17 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL arrow EXEC program . END_EXEC program

    END_EXEC  shift, and go to state 149


State 149

   17 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL arrow EXEC program END_EXEC . program

    ALPHA   shift, and go to state 13
    INT     shift, and go to state 14
    STRING  shift, and go to state 15
    OPEN_P  shift, and go to state 16
    RETURN  shift, and go to state 17
    STDIN   shift, and go to state 18
    STDOUT  shift, and go to state 19

    ALPHA     [reduce using rule 22 (get)]
    INT       [reduce using rule 22 (get)]
    STRING    [reduce using rule 22 (get)]
    OPEN_P    [reduce using rule 22 (get)]
    END_EXEC  reduce using rule 21 (program)
    END_EXEC  [reduce using rule 22 (get)]
    RETURN    [reduce using rule 22 (get)]
    STDIN     [reduce using rule 22 (get)]
    STDOUT    [reduce using rule 22 (get)]
    $default  reduce using rule 21 (program)

    call     go to state 20
    program  go to state 150
    get      go to state 22
    var      go to state 23


State 150

   17 program: OPEN_P rule operator rule CLOSE_P CONDITIONAL arrow EXEC program END_EXEC program .

    $default  reduce using rule 17 (program)
