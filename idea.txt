Tipos de datos: num´erico y cadenas.
string (s), int (i)

<type>$<name>=<value>

Ejemplos 
"int a = 0;" pasaría a ser: i$a=0. (El i representa el datatype)
                            s$a=hola'.. (hola.)

Constantes, Delimitadores.
. --> para terminar 
' --> para escapar chars
() {} []

Operadores aritméticos, relacionales, l´ogicos, de asignaci´on.
+ - * / = < > % |(or) &(and) ! ? ~(==) 

Bloque Condicional (if).
"if (cond) { ...}" pasaría a ser: (cond)? -> {lo que hay que hacer}

Bloque Do-While (repetici´on hasta condici´on).
"while (cond) {...}" pasaría a ser: (cond)? --> {lo que hay que hacer}

Extra - Array 
i$array_5=1,2,3,4,5. --> int array[5];
array_0=0. --> array[0] = 0;
array_2=2.




// COMPILADOR 

Tener un mecanismo para indicar cu´al es el punto de entrada (i.e. el main).
S{
    //todo el codigo
    i$ F name (i a12, s c){
        R a. (return a;)
    }
}

Proveer un mecanismo de entrada de datos: T´ıpicamente una funci´on o m´etodo tipo que permita ingresar
informaci´on por teclado o STDIN.
G(buffer). me deja en buffer el STDIN 
buffer puede ser int o string 

Proveer un mecanismo de salida de datos: una funci´on tipo printchar que permita desplegar informaci´on
por STDOUT hacia el monitor
s$a=pepe.
P(hola 'a' como estas) --> hola pepe como estas

Vn{ ASSIGNMENT, OPERATOR, RULE, ARROW}
 
S->ALPHA | INT END | STRING END | CONDITION RULE END_CONDITION ARROW EXEC RULE END_EXEC END | S | RETURN
ALPHA->ASSIGN ASSIGNMENT
ASSIGNMENT -> ALPHA | NUMBER
INT-> ALPHA ASSIGN ASSIGNMENT
STRING -> ALPHA ASSIGN ASSIGNMENT
RULE-> (RULE OPERATOR RULE) | ASSIGNMENT | S
ARROW -> WHILE | IF
OPERATOR -> OP | L | G| LE|GE|EQ|NOT|OR|AND 



//Examples
i$a=1.(a~1)?-->{a=a+1.Ra.}.
---------
i$ F pipo(i$a, i$b){a=a+b.Ra.} S{pipo(1,2).}
--------------
S{
    s$a. 
    a=chau. 
    i$b. 
    b=2. 
    P[hola 'a' 'b'\n]. 
    R b.
}

 S{
    s$a. 
    a=chau. 
    i$b. 
    b=2. 
    (b!~3)?-->{
        b=b+1.
    }
    P[hola 'a' 'b'\n]. 
    R b.
}